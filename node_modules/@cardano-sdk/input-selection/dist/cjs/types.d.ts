import { Cardano } from '@cardano-sdk/core';
export interface SelectionSkeleton {
    inputs: Set<Cardano.Utxo>;
    outputs: Set<Cardano.TxOut>;
    change: Array<Cardano.TxOut>;
    fee: Cardano.Lovelace;
}
export declare type Selection = SelectionSkeleton;
export interface SelectionResult {
    selection: Selection;
    remainingUTxO: Set<Cardano.Utxo>;
    redeemers?: Array<Cardano.Redeemer>;
}
export declare type TxCosts = {
    fee: bigint;
    redeemers?: Array<Cardano.Redeemer>;
};
export declare type EstimateTxCosts = (selectionSkeleton: SelectionSkeleton) => Promise<TxCosts>;
export declare type TokenBundleSizeExceedsLimit = (tokenBundle?: Cardano.TokenMap) => boolean;
export declare type ComputeMinimumCoinQuantity = (output: Cardano.TxOut) => Cardano.Lovelace;
export declare type ComputeSelectionLimit = (selectionSkeleton: SelectionSkeleton) => Promise<number>;
export interface SelectionConstraints {
    computeMinimumCost: EstimateTxCosts;
    tokenBundleSizeExceedsLimit: TokenBundleSizeExceedsLimit;
    computeMinimumCoinQuantity: ComputeMinimumCoinQuantity;
    computeSelectionLimit: ComputeSelectionLimit;
}
export interface ImplicitValue {
    coin?: Cardano.util.ImplicitCoin;
    mint?: Cardano.TokenMap;
}
export interface InputSelectionParameters {
    preSelectedUtxo: Set<Cardano.Utxo>;
    utxo: Set<Cardano.Utxo>;
    outputs: Set<Cardano.TxOut>;
    constraints: SelectionConstraints;
    implicitValue?: ImplicitValue;
}
export interface InputSelector {
    select(params: InputSelectionParameters): Promise<SelectionResult>;
}
export declare type ProtocolParametersForInputSelection = Pick<Cardano.ProtocolParameters, 'coinsPerUtxoByte' | 'maxTxSize' | 'maxValueSize' | 'minFeeCoefficient' | 'minFeeConstant' | 'prices'>;
export declare type ProtocolParametersRequiredByInputSelection = Required<{
    [k in keyof ProtocolParametersForInputSelection]: ProtocolParametersForInputSelection[k];
}>;
//# sourceMappingURL=types.d.ts.map