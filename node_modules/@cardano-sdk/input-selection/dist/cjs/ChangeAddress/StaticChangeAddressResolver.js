"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _StaticChangeAddressResolver_getAddresses;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticChangeAddressResolver = void 0;
const util_1 = require("@cardano-sdk/util");
class StaticChangeAddressResolver {
    constructor(getAddresses) {
        _StaticChangeAddressResolver_getAddresses.set(this, void 0);
        __classPrivateFieldSet(this, _StaticChangeAddressResolver_getAddresses, getAddresses, "f");
    }
    async resolve(selection) {
        const groupedAddresses = await __classPrivateFieldGet(this, _StaticChangeAddressResolver_getAddresses, "f").call(this);
        if (groupedAddresses.length === 0)
            throw new util_1.InvalidStateError('The wallet has no known addresses.');
        const address = groupedAddresses[0].address;
        return selection.change.map((txOut) => ({ ...txOut, address }));
    }
}
exports.StaticChangeAddressResolver = StaticChangeAddressResolver;
_StaticChangeAddressResolver_getAddresses = new WeakMap();
//# sourceMappingURL=StaticChangeAddressResolver.js.map