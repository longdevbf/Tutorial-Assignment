import { Cardano } from '@cardano-sdk/core';
import { ComputeMinimumCoinQuantity, ImplicitValue, TokenBundleSizeExceedsLimit } from './types';
export declare const stubMaxSizeAddress: Cardano.PaymentAddress;
export interface ImplicitTokens {
    spend(assetId: Cardano.AssetId): bigint;
    input(assetId: Cardano.AssetId): bigint;
}
export interface RequiredImplicitValue {
    implicitCoin: Required<Cardano.util.ImplicitCoin>;
    implicitTokens: ImplicitTokens;
}
export interface RoundRobinRandomImproveArgs {
    requiredUtxo: Cardano.Utxo[];
    utxo: Cardano.Utxo[];
    outputs: Cardano.TxOut[];
    changeAddress: Cardano.PaymentAddress;
    uniqueTxAssetIDs: Cardano.AssetId[];
    implicitValue: RequiredImplicitValue;
    random: typeof Math.random;
}
export declare type PreProcessedArgs = Omit<RoundRobinRandomImproveArgs, 'random'>;
export interface UtxoSelection {
    utxoSelected: Cardano.Utxo[];
    utxoRemaining: Cardano.Utxo[];
}
export declare const mintToImplicitTokens: (mintMap?: Cardano.TokenMap) => {
    implicitTokensInput: Map<Cardano.AssetId, bigint>;
    implicitTokensSpend: Map<Cardano.AssetId, bigint>;
};
export declare const preProcessArgs: (preSelectedUtxo: Set<Cardano.Utxo>, availableUtxo: Set<Cardano.Utxo>, outputSet: Set<Cardano.TxOut>, changeAddress: Cardano.PaymentAddress, partialImplicitValue?: ImplicitValue) => PreProcessedArgs;
export declare function toValues(outputs: Cardano.TxOut[]): Cardano.Value[];
export declare function toValues(utxo: Cardano.Utxo[]): Cardano.Value[];
export declare const assetQuantitySelector: (id: Cardano.AssetId) => (quantities: Cardano.Value[]) => bigint;
export declare const getCoinQuantity: (quantities: Cardano.Value[]) => bigint;
export declare const assertIsCoinBalanceSufficient: (utxoValues: Cardano.Value[], outputValues: Cardano.Value[], implicitCoin: Required<Cardano.util.ImplicitCoin>) => void;
export declare const assertIsBalanceSufficient: (uniqueTxAssetIDs: Cardano.AssetId[], preSelectedUtxo: Cardano.Utxo[], utxo: Cardano.Utxo[], outputs: Cardano.TxOut[], { implicitCoin, implicitTokens }: RequiredImplicitValue) => void;
export declare const sortByCoins: (lhs: Cardano.TxOut, rhs: Cardano.TxOut) => 0 | 1 | -1;
export declare const subtractTokenMaps: (lhs: Cardano.TokenMap | undefined, rhs: Cardano.TokenMap | undefined) => Cardano.TokenMap | undefined;
export declare const addTokenMaps: (lhs: Cardano.TokenMap | undefined, rhs: Cardano.TokenMap | undefined) => Cardano.TokenMap | undefined;
export declare const hasNegativeAssetValue: (assets: Cardano.TokenMap | undefined) => boolean;
export declare const isValidValue: (value: Cardano.Value, computeMinimumCoinQuantity: ComputeMinimumCoinQuantity, tokenBundleSizeExceedsLimit: TokenBundleSizeExceedsLimit, feeToDiscount: bigint) => boolean;
//# sourceMappingURL=util.d.ts.map