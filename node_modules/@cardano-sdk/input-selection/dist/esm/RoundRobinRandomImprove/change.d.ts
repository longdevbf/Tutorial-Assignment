import { Cardano } from '@cardano-sdk/core';
import { ComputeMinimumCoinQuantity, TokenBundleSizeExceedsLimit, TxCosts } from '../types.js';
import { RequiredImplicitValue, UtxoSelection } from '../util.js';
declare type EstimateTxCostsWithOriginalOutputs = (utxo: Cardano.Utxo[], change: Cardano.Value[]) => Promise<TxCosts>;
interface ChangeComputationArgs {
    utxoSelection: UtxoSelection;
    outputValues: Cardano.Value[];
    uniqueTxAssetIDs: Cardano.AssetId[];
    implicitValue: RequiredImplicitValue;
    estimateTxCosts: EstimateTxCostsWithOriginalOutputs;
    computeMinimumCoinQuantity: ComputeMinimumCoinQuantity;
    tokenBundleSizeExceedsLimit: TokenBundleSizeExceedsLimit;
    random: typeof Math.random;
}
interface ChangeComputationResult {
    remainingUTxO: Cardano.Utxo[];
    inputs: Cardano.Utxo[];
    change: Cardano.Value[];
    fee: Cardano.Lovelace;
    redeemers?: Array<Cardano.Redeemer>;
}
export declare const coalesceChangeBundlesForMinCoinRequirement: (changeBundles: Cardano.Value[], computeMinimumCoinQuantity: ComputeMinimumCoinQuantity) => Cardano.Value[] | undefined;
export declare const computeChangeAndAdjustForFee: ({ computeMinimumCoinQuantity, tokenBundleSizeExceedsLimit, estimateTxCosts, outputValues, uniqueTxAssetIDs, implicitValue, random, utxoSelection }: ChangeComputationArgs) => Promise<ChangeComputationResult>;
export {};
//# sourceMappingURL=change.d.ts.map