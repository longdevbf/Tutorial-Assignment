var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GreedyInputSelector_props;
import { coalesceValueQuantities } from '@cardano-sdk/core';
import { InputSelectionError, InputSelectionFailure } from '../InputSelectionError.js';
import { addTokenMaps, getCoinQuantity, hasNegativeAssetValue, sortByCoins, stubMaxSizeAddress, subtractTokenMaps, toValues } from '../util.js';
import { sortUtxoByTxIn, splitChange } from './util.js';
const adjustOutputsForFee = async (changeLovelace, constraints, inputs, outputs, changeOutputs, currentFee) => {
    const totalOutputs = new Set([...outputs, ...changeOutputs]);
    const { fee, redeemers } = await constraints.computeMinimumCost({
        change: [],
        fee: currentFee,
        inputs,
        outputs: totalOutputs
    });
    if (fee === changeLovelace)
        return { change: [], fee, feeAccountedFor: true, redeemers };
    if (changeLovelace < fee)
        throw new InputSelectionError(InputSelectionFailure.UtxoBalanceInsufficient);
    const updatedOutputs = [...changeOutputs];
    updatedOutputs.sort(sortByCoins);
    let feeAccountedFor = false;
    for (const output of updatedOutputs) {
        const adjustedCoins = output.value.coins - fee;
        if (adjustedCoins >= constraints.computeMinimumCoinQuantity(output)) {
            output.value.coins = adjustedCoins;
            feeAccountedFor = true;
            break;
        }
    }
    return { change: [...updatedOutputs], fee, feeAccountedFor, redeemers };
};
const splitChangeAndComputeFee = async (inputs, outputs, changeLovelace, changeAssets, constraints, getChangeAddresses, fee) => {
    const changeOutputs = await splitChange(getChangeAddresses, changeLovelace, changeAssets, constraints.computeMinimumCoinQuantity, constraints.tokenBundleSizeExceedsLimit, fee);
    let adjustedChangeOutputs = await adjustOutputsForFee(changeLovelace, constraints, inputs, outputs, changeOutputs, fee);
    if (adjustedChangeOutputs.fee >= changeLovelace) {
        const result = {
            change: [
                {
                    address: stubMaxSizeAddress,
                    value: {
                        assets: changeAssets,
                        coins: 0n
                    }
                }
            ],
            fee: adjustedChangeOutputs.fee,
            feeAccountedFor: true
        };
        if (result.change[0].value.coins < constraints.computeMinimumCoinQuantity(result.change[0]))
            throw new InputSelectionError(InputSelectionFailure.UtxoFullyDepleted);
        return result;
    }
    if (fee < adjustedChangeOutputs.fee) {
        adjustedChangeOutputs = await splitChangeAndComputeFee(inputs, outputs, changeLovelace, changeAssets, constraints, getChangeAddresses, adjustedChangeOutputs.fee);
        if (adjustedChangeOutputs.change.length === 0)
            throw new InputSelectionError(InputSelectionFailure.UtxoFullyDepleted);
    }
    for (const out of adjustedChangeOutputs.change) {
        if (out.value.coins < constraints.computeMinimumCoinQuantity(out))
            throw new InputSelectionError(InputSelectionFailure.UtxoFullyDepleted);
    }
    if (!adjustedChangeOutputs.feeAccountedFor)
        throw new InputSelectionError(InputSelectionFailure.UtxoFullyDepleted);
    return adjustedChangeOutputs;
};
export class GreedyInputSelector {
    constructor(props) {
        _GreedyInputSelector_props.set(this, void 0);
        __classPrivateFieldSet(this, _GreedyInputSelector_props, props, "f");
    }
    async select(params) {
        const { preSelectedUtxo, utxo: inputs, outputs, constraints, implicitValue } = params;
        const allInputs = new Set([...inputs, ...preSelectedUtxo]);
        const utxoValues = toValues([...allInputs]);
        const outputsValues = toValues([...outputs]);
        const totalLovelaceInUtxoSet = getCoinQuantity(utxoValues);
        const totalLovelaceInOutputSet = getCoinQuantity(outputsValues);
        const totalAssetsInUtxoSet = coalesceValueQuantities(utxoValues).assets;
        const totalAssetsInOutputSet = coalesceValueQuantities(outputsValues).assets;
        const implicitCoinInput = implicitValue?.coin?.input || 0n;
        const implicitCoinOutput = implicitValue?.coin?.deposit || 0n;
        const implicitAssetInput = implicitValue?.mint || new Map();
        const totalLovelaceInput = totalLovelaceInUtxoSet + implicitCoinInput;
        const totalLovelaceOutput = totalLovelaceInOutputSet + implicitCoinOutput;
        const totalAssetsInput = addTokenMaps(totalAssetsInUtxoSet, implicitAssetInput);
        const changeLovelace = totalLovelaceInput - totalLovelaceOutput;
        const changeAssets = subtractTokenMaps(totalAssetsInput, totalAssetsInOutputSet);
        if (allInputs.size === 0 || totalLovelaceOutput > totalLovelaceInput || hasNegativeAssetValue(changeAssets))
            throw new InputSelectionError(InputSelectionFailure.UtxoBalanceInsufficient);
        const adjustedChangeOutputs = await splitChangeAndComputeFee(allInputs, outputs, changeLovelace, changeAssets, constraints, __classPrivateFieldGet(this, _GreedyInputSelector_props, "f").getChangeAddresses, 0n);
        const change = adjustedChangeOutputs.change.filter((out) => out.value.coins > 0n || (out.value.assets?.size || 0) > 0);
        if (changeLovelace - adjustedChangeOutputs.fee < 0n)
            throw new InputSelectionError(InputSelectionFailure.UtxoBalanceInsufficient);
        if (allInputs.size >
            (await constraints.computeSelectionLimit({ change, fee: adjustedChangeOutputs.fee, inputs: allInputs, outputs }))) {
            throw new InputSelectionError(InputSelectionFailure.MaximumInputCountExceeded);
        }
        return {
            remainingUTxO: new Set(),
            selection: {
                change,
                fee: adjustedChangeOutputs.fee,
                inputs: new Set([...allInputs].sort(sortUtxoByTxIn)),
                outputs
            }
        };
    }
}
_GreedyInputSelector_props = new WeakMap();
//# sourceMappingURL=GreedyInputSelector.js.map