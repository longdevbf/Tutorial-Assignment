// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file utxorpc/v1alpha/cardano/cardano.proto (package utxorpc.v1alpha.cardano, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Purpose of the redeemer in a transaction.
 *
 * @generated from enum utxorpc.v1alpha.cardano.RedeemerPurpose
 */
export enum RedeemerPurpose {
  /**
   * @generated from enum value: REDEEMER_PURPOSE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: REDEEMER_PURPOSE_SPEND = 1;
   */
  SPEND = 1,

  /**
   * @generated from enum value: REDEEMER_PURPOSE_MINT = 2;
   */
  MINT = 2,

  /**
   * @generated from enum value: REDEEMER_PURPOSE_CERT = 3;
   */
  CERT = 3,

  /**
   * @generated from enum value: REDEEMER_PURPOSE_REWARD = 4;
   */
  REWARD = 4,

  /**
   * @generated from enum value: REDEEMER_PURPOSE_VOTE = 5;
   */
  VOTE = 5,

  /**
   * @generated from enum value: REDEEMER_PURPOSE_PROPOSE = 6;
   */
  PROPOSE = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(RedeemerPurpose)
proto3.util.setEnumType(RedeemerPurpose, "utxorpc.v1alpha.cardano.RedeemerPurpose", [
  { no: 0, name: "REDEEMER_PURPOSE_UNSPECIFIED" },
  { no: 1, name: "REDEEMER_PURPOSE_SPEND" },
  { no: 2, name: "REDEEMER_PURPOSE_MINT" },
  { no: 3, name: "REDEEMER_PURPOSE_CERT" },
  { no: 4, name: "REDEEMER_PURPOSE_REWARD" },
  { no: 5, name: "REDEEMER_PURPOSE_VOTE" },
  { no: 6, name: "REDEEMER_PURPOSE_PROPOSE" },
]);

/**
 * @generated from enum utxorpc.v1alpha.cardano.MirSource
 */
export enum MirSource {
  /**
   * @generated from enum value: MIR_SOURCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MIR_SOURCE_RESERVES = 1;
   */
  RESERVES = 1,

  /**
   * @generated from enum value: MIR_SOURCE_TREASURY = 2;
   */
  TREASURY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(MirSource)
proto3.util.setEnumType(MirSource, "utxorpc.v1alpha.cardano.MirSource", [
  { no: 0, name: "MIR_SOURCE_UNSPECIFIED" },
  { no: 1, name: "MIR_SOURCE_RESERVES" },
  { no: 2, name: "MIR_SOURCE_TREASURY" },
]);

/**
 * Redeemer information for a Plutus script.
 *
 * @generated from message utxorpc.v1alpha.cardano.Redeemer
 */
export class Redeemer extends Message<Redeemer> {
  /**
   * Purpose of the redeemer.
   *
   * @generated from field: utxorpc.v1alpha.cardano.RedeemerPurpose purpose = 1;
   */
  purpose = RedeemerPurpose.UNSPECIFIED;

  /**
   * Plutus data associated with the redeemer.
   *
   * @generated from field: utxorpc.v1alpha.cardano.PlutusData payload = 2;
   */
  payload?: PlutusData;

  /**
   * Index of the redee mer.
   *
   * @generated from field: uint32 index = 3;
   */
  index = 0;

  /**
   * Execution units consumed by the redeemer.
   *
   * @generated from field: utxorpc.v1alpha.cardano.ExUnits ex_units = 4;
   */
  exUnits?: ExUnits;

  /**
   * Original cbor-encoded data as seen on-chain
   *
   * @generated from field: bytes original_cbor = 5;
   */
  originalCbor = new Uint8Array(0);

  constructor(data?: PartialMessage<Redeemer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Redeemer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "purpose", kind: "enum", T: proto3.getEnumType(RedeemerPurpose) },
    { no: 2, name: "payload", kind: "message", T: PlutusData },
    { no: 3, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "ex_units", kind: "message", T: ExUnits },
    { no: 5, name: "original_cbor", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Redeemer {
    return new Redeemer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Redeemer {
    return new Redeemer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Redeemer {
    return new Redeemer().fromJsonString(jsonString, options);
  }

  static equals(a: Redeemer | PlainMessage<Redeemer> | undefined, b: Redeemer | PlainMessage<Redeemer> | undefined): boolean {
    return proto3.util.equals(Redeemer, a, b);
  }
}

/**
 * Represents a transaction input in the Cardano blockchain.
 *
 * @generated from message utxorpc.v1alpha.cardano.TxInput
 */
export class TxInput extends Message<TxInput> {
  /**
   * Hash of the previous transaction.
   *
   * @generated from field: bytes tx_hash = 1;
   */
  txHash = new Uint8Array(0);

  /**
   * Index of the output in the previous transaction.
   *
   * @generated from field: uint32 output_index = 2;
   */
  outputIndex = 0;

  /**
   * Content of the input represented as output of the related transaction
   *
   * @generated from field: utxorpc.v1alpha.cardano.TxOutput as_output = 3;
   */
  asOutput?: TxOutput;

  /**
   * Redeemer for the Plutus script.
   *
   * @generated from field: utxorpc.v1alpha.cardano.Redeemer redeemer = 4;
   */
  redeemer?: Redeemer;

  constructor(data?: PartialMessage<TxInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.TxInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "output_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "as_output", kind: "message", T: TxOutput },
    { no: 4, name: "redeemer", kind: "message", T: Redeemer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxInput {
    return new TxInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxInput {
    return new TxInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxInput {
    return new TxInput().fromJsonString(jsonString, options);
  }

  static equals(a: TxInput | PlainMessage<TxInput> | undefined, b: TxInput | PlainMessage<TxInput> | undefined): boolean {
    return proto3.util.equals(TxInput, a, b);
  }
}

/**
 * Represents a transaction output in the Cardano blockchain.
 *
 * @generated from message utxorpc.v1alpha.cardano.TxOutput
 */
export class TxOutput extends Message<TxOutput> {
  /**
   * Address receiving the output.
   *
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  /**
   * Amount of ADA in the output.
   *
   * @generated from field: uint64 coin = 2;
   */
  coin = protoInt64.zero;

  /**
   * Additional native (non-ADA) assets in the output.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.Multiasset assets = 3;
   */
  assets: Multiasset[] = [];

  /**
   * Plutus data associated with the output.
   *
   * @generated from field: utxorpc.v1alpha.cardano.Datum datum = 4;
   */
  datum?: Datum;

  /**
   * Script associated with the output.
   *
   * @generated from field: utxorpc.v1alpha.cardano.Script script = 5;
   */
  script?: Script;

  constructor(data?: PartialMessage<TxOutput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.TxOutput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "assets", kind: "message", T: Multiasset, repeated: true },
    { no: 4, name: "datum", kind: "message", T: Datum },
    { no: 5, name: "script", kind: "message", T: Script },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxOutput {
    return new TxOutput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxOutput {
    return new TxOutput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxOutput {
    return new TxOutput().fromJsonString(jsonString, options);
  }

  static equals(a: TxOutput | PlainMessage<TxOutput> | undefined, b: TxOutput | PlainMessage<TxOutput> | undefined): boolean {
    return proto3.util.equals(TxOutput, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.Datum
 */
export class Datum extends Message<Datum> {
  /**
   * Hash of this datum as seen on-chain
   *
   * @generated from field: bytes hash = 1;
   */
  hash = new Uint8Array(0);

  /**
   * Parsed Plutus data payload
   *
   * @generated from field: utxorpc.v1alpha.cardano.PlutusData payload = 2;
   */
  payload?: PlutusData;

  /**
   * Original cbor-encoded data as seen on-chain
   *
   * @generated from field: bytes original_cbor = 3;
   */
  originalCbor = new Uint8Array(0);

  constructor(data?: PartialMessage<Datum>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Datum";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "payload", kind: "message", T: PlutusData },
    { no: 3, name: "original_cbor", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Datum {
    return new Datum().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Datum {
    return new Datum().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Datum {
    return new Datum().fromJsonString(jsonString, options);
  }

  static equals(a: Datum | PlainMessage<Datum> | undefined, b: Datum | PlainMessage<Datum> | undefined): boolean {
    return proto3.util.equals(Datum, a, b);
  }
}

/**
 * Represents a custom asset in the Cardano blockchain.
 *
 * @generated from message utxorpc.v1alpha.cardano.Asset
 */
export class Asset extends Message<Asset> {
  /**
   * Name of the custom asset.
   *
   * @generated from field: bytes name = 1;
   */
  name = new Uint8Array(0);

  /**
   * Quantity of the custom asset in case of an output.
   *
   * @generated from field: uint64 output_coin = 2;
   */
  outputCoin = protoInt64.zero;

  /**
   * Quantity of the custom asset in case of a mint.
   *
   * @generated from field: int64 mint_coin = 3;
   */
  mintCoin = protoInt64.zero;

  constructor(data?: PartialMessage<Asset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Asset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "output_coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "mint_coin", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Asset {
    return new Asset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJsonString(jsonString, options);
  }

  static equals(a: Asset | PlainMessage<Asset> | undefined, b: Asset | PlainMessage<Asset> | undefined): boolean {
    return proto3.util.equals(Asset, a, b);
  }
}

/**
 * Represents a multi-asset group in the Cardano blockchain.
 *
 * @generated from message utxorpc.v1alpha.cardano.Multiasset
 */
export class Multiasset extends Message<Multiasset> {
  /**
   * Policy ID governing the custom assets.
   *
   * @generated from field: bytes policy_id = 1;
   */
  policyId = new Uint8Array(0);

  /**
   * List of custom assets.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.Asset assets = 2;
   */
  assets: Asset[] = [];

  /**
   * Redeemer for the Plutus script.
   *
   * @generated from field: utxorpc.v1alpha.cardano.Redeemer redeemer = 3;
   */
  redeemer?: Redeemer;

  constructor(data?: PartialMessage<Multiasset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Multiasset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "policy_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "assets", kind: "message", T: Asset, repeated: true },
    { no: 3, name: "redeemer", kind: "message", T: Redeemer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Multiasset {
    return new Multiasset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Multiasset {
    return new Multiasset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Multiasset {
    return new Multiasset().fromJsonString(jsonString, options);
  }

  static equals(a: Multiasset | PlainMessage<Multiasset> | undefined, b: Multiasset | PlainMessage<Multiasset> | undefined): boolean {
    return proto3.util.equals(Multiasset, a, b);
  }
}

/**
 * Represents the validity interval of a transaction.
 *
 * @generated from message utxorpc.v1alpha.cardano.TxValidity
 */
export class TxValidity extends Message<TxValidity> {
  /**
   * Start of the validity interval.
   *
   * @generated from field: uint64 start = 1;
   */
  start = protoInt64.zero;

  /**
   * End of the validity interval (TTL: Time to Live).
   *
   * @generated from field: uint64 ttl = 2;
   */
  ttl = protoInt64.zero;

  constructor(data?: PartialMessage<TxValidity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.TxValidity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "ttl", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxValidity {
    return new TxValidity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxValidity {
    return new TxValidity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxValidity {
    return new TxValidity().fromJsonString(jsonString, options);
  }

  static equals(a: TxValidity | PlainMessage<TxValidity> | undefined, b: TxValidity | PlainMessage<TxValidity> | undefined): boolean {
    return proto3.util.equals(TxValidity, a, b);
  }
}

/**
 * Represents the collateral information for a transaction.
 *
 * @generated from message utxorpc.v1alpha.cardano.Collateral
 */
export class Collateral extends Message<Collateral> {
  /**
   * Collateral inputs for the transaction.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.TxInput collateral = 1;
   */
  collateral: TxInput[] = [];

  /**
   * Collateral return in case of script failure.
   *
   * @generated from field: utxorpc.v1alpha.cardano.TxOutput collateral_return = 2;
   */
  collateralReturn?: TxOutput;

  /**
   * Total amount of collateral.
   *
   * @generated from field: uint64 total_collateral = 3;
   */
  totalCollateral = protoInt64.zero;

  constructor(data?: PartialMessage<Collateral>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Collateral";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral", kind: "message", T: TxInput, repeated: true },
    { no: 2, name: "collateral_return", kind: "message", T: TxOutput },
    { no: 3, name: "total_collateral", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collateral {
    return new Collateral().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collateral {
    return new Collateral().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collateral {
    return new Collateral().fromJsonString(jsonString, options);
  }

  static equals(a: Collateral | PlainMessage<Collateral> | undefined, b: Collateral | PlainMessage<Collateral> | undefined): boolean {
    return proto3.util.equals(Collateral, a, b);
  }
}

/**
 * Represents a withdrawal from a reward account.
 *
 * @generated from message utxorpc.v1alpha.cardano.Withdrawal
 */
export class Withdrawal extends Message<Withdrawal> {
  /**
   * Address of the reward account.
   *
   * @generated from field: bytes reward_account = 1;
   */
  rewardAccount = new Uint8Array(0);

  /**
   * Amount of ADA withdrawn.
   *
   * @generated from field: uint64 coin = 2;
   */
  coin = protoInt64.zero;

  /**
   * Redeemer for the Plutus script.
   *
   * @generated from field: utxorpc.v1alpha.cardano.Redeemer redeemer = 3;
   */
  redeemer?: Redeemer;

  constructor(data?: PartialMessage<Withdrawal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Withdrawal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reward_account", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "redeemer", kind: "message", T: Redeemer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Withdrawal {
    return new Withdrawal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Withdrawal {
    return new Withdrawal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Withdrawal {
    return new Withdrawal().fromJsonString(jsonString, options);
  }

  static equals(a: Withdrawal | PlainMessage<Withdrawal> | undefined, b: Withdrawal | PlainMessage<Withdrawal> | undefined): boolean {
    return proto3.util.equals(Withdrawal, a, b);
  }
}

/**
 * Represents a set of witnesses that validate a transaction
 *
 * @generated from message utxorpc.v1alpha.cardano.WitnessSet
 */
export class WitnessSet extends Message<WitnessSet> {
  /**
   * List of VKey witnesses.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.VKeyWitness vkeywitness = 1;
   */
  vkeywitness: VKeyWitness[] = [];

  /**
   * List of scripts.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.Script script = 2;
   */
  script: Script[] = [];

  /**
   * List of Plutus data elements associated with the transaction.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.PlutusData plutus_datums = 3;
   */
  plutusDatums: PlutusData[] = [];

  constructor(data?: PartialMessage<WitnessSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.WitnessSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vkeywitness", kind: "message", T: VKeyWitness, repeated: true },
    { no: 2, name: "script", kind: "message", T: Script, repeated: true },
    { no: 3, name: "plutus_datums", kind: "message", T: PlutusData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WitnessSet {
    return new WitnessSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WitnessSet {
    return new WitnessSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WitnessSet {
    return new WitnessSet().fromJsonString(jsonString, options);
  }

  static equals(a: WitnessSet | PlainMessage<WitnessSet> | undefined, b: WitnessSet | PlainMessage<WitnessSet> | undefined): boolean {
    return proto3.util.equals(WitnessSet, a, b);
  }
}

/**
 * Auxiliary data not directly tied to the validation process
 *
 * @generated from message utxorpc.v1alpha.cardano.AuxData
 */
export class AuxData extends Message<AuxData> {
  /**
   * List of auxiliary metadata elements.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.Metadata metadata = 1;
   */
  metadata: Metadata[] = [];

  /**
   * List of auxiliary scripts.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.Script scripts = 2;
   */
  scripts: Script[] = [];

  constructor(data?: PartialMessage<AuxData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.AuxData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata, repeated: true },
    { no: 2, name: "scripts", kind: "message", T: Script, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuxData {
    return new AuxData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuxData {
    return new AuxData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuxData {
    return new AuxData().fromJsonString(jsonString, options);
  }

  static equals(a: AuxData | PlainMessage<AuxData> | undefined, b: AuxData | PlainMessage<AuxData> | undefined): boolean {
    return proto3.util.equals(AuxData, a, b);
  }
}

/**
 * Represents a transaction in the Cardano blockchain.
 *
 * @generated from message utxorpc.v1alpha.cardano.Tx
 */
export class Tx extends Message<Tx> {
  /**
   * List of transaction inputs
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.TxInput inputs = 1;
   */
  inputs: TxInput[] = [];

  /**
   * List of transaction outputs
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.TxOutput outputs = 2;
   */
  outputs: TxOutput[] = [];

  /**
   * List of certificates
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.Certificate certificates = 3;
   */
  certificates: Certificate[] = [];

  /**
   * List of withdrawals
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.Withdrawal withdrawals = 4;
   */
  withdrawals: Withdrawal[] = [];

  /**
   * List of minted custom assets
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.Multiasset mint = 5;
   */
  mint: Multiasset[] = [];

  /**
   * List of reference inputs
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.TxInput reference_inputs = 6;
   */
  referenceInputs: TxInput[] = [];

  /**
   * Witnesses that validte the transaction
   *
   * @generated from field: utxorpc.v1alpha.cardano.WitnessSet witnesses = 7;
   */
  witnesses?: WitnessSet;

  /**
   * Collateral details in case of failed transaction
   *
   * @generated from field: utxorpc.v1alpha.cardano.Collateral collateral = 8;
   */
  collateral?: Collateral;

  /**
   * Transaction fee in ADA
   *
   * @generated from field: uint64 fee = 9;
   */
  fee = protoInt64.zero;

  /**
   * Validity interval of the transaction
   *
   * @generated from field: utxorpc.v1alpha.cardano.TxValidity validity = 10;
   */
  validity?: TxValidity;

  /**
   * Flag indicating whether the transaction was successful
   *
   * @generated from field: bool successful = 11;
   */
  successful = false;

  /**
   * Auxiliary data not directly tied to the validation process
   *
   * @generated from field: utxorpc.v1alpha.cardano.AuxData auxiliary = 12;
   */
  auxiliary?: AuxData;

  /**
   * Hash of the transaction that serves as main identifier
   *
   * @generated from field: bytes hash = 13;
   */
  hash = new Uint8Array(0);

  /**
   * List of governance actions proposed
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.GovernanceActionProposal proposals = 14;
   */
  proposals: GovernanceActionProposal[] = [];

  constructor(data?: PartialMessage<Tx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Tx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inputs", kind: "message", T: TxInput, repeated: true },
    { no: 2, name: "outputs", kind: "message", T: TxOutput, repeated: true },
    { no: 3, name: "certificates", kind: "message", T: Certificate, repeated: true },
    { no: 4, name: "withdrawals", kind: "message", T: Withdrawal, repeated: true },
    { no: 5, name: "mint", kind: "message", T: Multiasset, repeated: true },
    { no: 6, name: "reference_inputs", kind: "message", T: TxInput, repeated: true },
    { no: 7, name: "witnesses", kind: "message", T: WitnessSet },
    { no: 8, name: "collateral", kind: "message", T: Collateral },
    { no: 9, name: "fee", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "validity", kind: "message", T: TxValidity },
    { no: 11, name: "successful", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "auxiliary", kind: "message", T: AuxData },
    { no: 13, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 14, name: "proposals", kind: "message", T: GovernanceActionProposal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tx {
    return new Tx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tx {
    return new Tx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tx {
    return new Tx().fromJsonString(jsonString, options);
  }

  static equals(a: Tx | PlainMessage<Tx> | undefined, b: Tx | PlainMessage<Tx> | undefined): boolean {
    return proto3.util.equals(Tx, a, b);
  }
}

/**
 * Define a governance action proposal
 *
 * @generated from message utxorpc.v1alpha.cardano.GovernanceActionProposal
 */
export class GovernanceActionProposal extends Message<GovernanceActionProposal> {
  /**
   * The amount deposited for the governance action
   *
   * @generated from field: uint64 deposit = 1;
   */
  deposit = protoInt64.zero;

  /**
   * The reward account the deposit should be returned to
   *
   * @generated from field: bytes reward_account = 2;
   */
  rewardAccount = new Uint8Array(0);

  /**
   * @generated from field: utxorpc.v1alpha.cardano.GovernanceAction gov_action = 3;
   */
  govAction?: GovernanceAction;

  /**
   * @generated from field: utxorpc.v1alpha.cardano.Anchor anchor = 4;
   */
  anchor?: Anchor;

  constructor(data?: PartialMessage<GovernanceActionProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.GovernanceActionProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deposit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "reward_account", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "gov_action", kind: "message", T: GovernanceAction },
    { no: 4, name: "anchor", kind: "message", T: Anchor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GovernanceActionProposal {
    return new GovernanceActionProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GovernanceActionProposal {
    return new GovernanceActionProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GovernanceActionProposal {
    return new GovernanceActionProposal().fromJsonString(jsonString, options);
  }

  static equals(a: GovernanceActionProposal | PlainMessage<GovernanceActionProposal> | undefined, b: GovernanceActionProposal | PlainMessage<GovernanceActionProposal> | undefined): boolean {
    return proto3.util.equals(GovernanceActionProposal, a, b);
  }
}

/**
 * Define a Governance Action
 *
 * @generated from message utxorpc.v1alpha.cardano.GovernanceAction
 */
export class GovernanceAction extends Message<GovernanceAction> {
  /**
   * @generated from oneof utxorpc.v1alpha.cardano.GovernanceAction.governance_action
   */
  governanceAction: {
    /**
     * Change on-chain parameters
     *
     * @generated from field: utxorpc.v1alpha.cardano.ParameterChangeAction parameter_change_action = 1;
     */
    value: ParameterChangeAction;
    case: "parameterChangeAction";
  } | {
    /**
     * Initiate a Hard Fork
     *
     * @generated from field: utxorpc.v1alpha.cardano.HardForkInitiationAction hard_fork_initiation_action = 2;
     */
    value: HardForkInitiationAction;
    case: "hardForkInitiationAction";
  } | {
    /**
     * Withdraw from the Treasury
     *
     * @generated from field: utxorpc.v1alpha.cardano.TreasuryWithdrawalsAction treasury_withdrawals_action = 3;
     */
    value: TreasuryWithdrawalsAction;
    case: "treasuryWithdrawalsAction";
  } | {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.NoConfidenceAction no_confidence_action = 4;
     */
    value: NoConfidenceAction;
    case: "noConfidenceAction";
  } | {
    /**
     * Update the Constitution Committee
     *
     * @generated from field: utxorpc.v1alpha.cardano.UpdateCommitteeAction update_committee_action = 5;
     */
    value: UpdateCommitteeAction;
    case: "updateCommitteeAction";
  } | {
    /**
     * Replace the Constitution
     *
     * @generated from field: utxorpc.v1alpha.cardano.NewConstitutionAction new_constitution_action = 6;
     */
    value: NewConstitutionAction;
    case: "newConstitutionAction";
  } | {
    /**
     * TODO: revisit if there's a better way to handle this option because it doesn't actually need a value but proto syntax needs to require it
     *
     * Info action should just be the integer number 6
     *
     * @generated from field: uint32 info_action = 7;
     */
    value: number;
    case: "infoAction";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GovernanceAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.GovernanceAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parameter_change_action", kind: "message", T: ParameterChangeAction, oneof: "governance_action" },
    { no: 2, name: "hard_fork_initiation_action", kind: "message", T: HardForkInitiationAction, oneof: "governance_action" },
    { no: 3, name: "treasury_withdrawals_action", kind: "message", T: TreasuryWithdrawalsAction, oneof: "governance_action" },
    { no: 4, name: "no_confidence_action", kind: "message", T: NoConfidenceAction, oneof: "governance_action" },
    { no: 5, name: "update_committee_action", kind: "message", T: UpdateCommitteeAction, oneof: "governance_action" },
    { no: 6, name: "new_constitution_action", kind: "message", T: NewConstitutionAction, oneof: "governance_action" },
    { no: 7, name: "info_action", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "governance_action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GovernanceAction {
    return new GovernanceAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GovernanceAction {
    return new GovernanceAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GovernanceAction {
    return new GovernanceAction().fromJsonString(jsonString, options);
  }

  static equals(a: GovernanceAction | PlainMessage<GovernanceAction> | undefined, b: GovernanceAction | PlainMessage<GovernanceAction> | undefined): boolean {
    return proto3.util.equals(GovernanceAction, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.GovernanceActionId
 */
export class GovernanceActionId extends Message<GovernanceActionId> {
  /**
   * @generated from field: bytes transaction_id = 1;
   */
  transactionId = new Uint8Array(0);

  /**
   * @generated from field: uint32 governance_action_index = 2;
   */
  governanceActionIndex = 0;

  constructor(data?: PartialMessage<GovernanceActionId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.GovernanceActionId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "governance_action_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GovernanceActionId {
    return new GovernanceActionId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GovernanceActionId {
    return new GovernanceActionId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GovernanceActionId {
    return new GovernanceActionId().fromJsonString(jsonString, options);
  }

  static equals(a: GovernanceActionId | PlainMessage<GovernanceActionId> | undefined, b: GovernanceActionId | PlainMessage<GovernanceActionId> | undefined): boolean {
    return proto3.util.equals(GovernanceActionId, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.ParameterChangeAction
 */
export class ParameterChangeAction extends Message<ParameterChangeAction> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.GovernanceActionId gov_action_id = 1;
   */
  govActionId?: GovernanceActionId;

  /**
   * The updates proposed
   *
   * @generated from field: utxorpc.v1alpha.cardano.PParams protocol_param_update = 2;
   */
  protocolParamUpdate?: PParams;

  /**
   * @generated from field: bytes policy_hash = 3;
   */
  policyHash = new Uint8Array(0);

  constructor(data?: PartialMessage<ParameterChangeAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.ParameterChangeAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gov_action_id", kind: "message", T: GovernanceActionId },
    { no: 2, name: "protocol_param_update", kind: "message", T: PParams },
    { no: 3, name: "policy_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParameterChangeAction {
    return new ParameterChangeAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParameterChangeAction {
    return new ParameterChangeAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParameterChangeAction {
    return new ParameterChangeAction().fromJsonString(jsonString, options);
  }

  static equals(a: ParameterChangeAction | PlainMessage<ParameterChangeAction> | undefined, b: ParameterChangeAction | PlainMessage<ParameterChangeAction> | undefined): boolean {
    return proto3.util.equals(ParameterChangeAction, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.HardForkInitiationAction
 */
export class HardForkInitiationAction extends Message<HardForkInitiationAction> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.GovernanceActionId gov_action_id = 1;
   */
  govActionId?: GovernanceActionId;

  /**
   * The protocol version to fork to
   *
   * @generated from field: utxorpc.v1alpha.cardano.ProtocolVersion protocol_version = 2;
   */
  protocolVersion?: ProtocolVersion;

  constructor(data?: PartialMessage<HardForkInitiationAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.HardForkInitiationAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gov_action_id", kind: "message", T: GovernanceActionId },
    { no: 2, name: "protocol_version", kind: "message", T: ProtocolVersion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HardForkInitiationAction {
    return new HardForkInitiationAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HardForkInitiationAction {
    return new HardForkInitiationAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HardForkInitiationAction {
    return new HardForkInitiationAction().fromJsonString(jsonString, options);
  }

  static equals(a: HardForkInitiationAction | PlainMessage<HardForkInitiationAction> | undefined, b: HardForkInitiationAction | PlainMessage<HardForkInitiationAction> | undefined): boolean {
    return proto3.util.equals(HardForkInitiationAction, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.TreasuryWithdrawalsAction
 */
export class TreasuryWithdrawalsAction extends Message<TreasuryWithdrawalsAction> {
  /**
   * A map of the withdrawals to make
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.WithdrawalAmount withdrawals = 1;
   */
  withdrawals: WithdrawalAmount[] = [];

  /**
   * @generated from field: bytes policy_hash = 2;
   */
  policyHash = new Uint8Array(0);

  constructor(data?: PartialMessage<TreasuryWithdrawalsAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.TreasuryWithdrawalsAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "withdrawals", kind: "message", T: WithdrawalAmount, repeated: true },
    { no: 2, name: "policy_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TreasuryWithdrawalsAction {
    return new TreasuryWithdrawalsAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TreasuryWithdrawalsAction {
    return new TreasuryWithdrawalsAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TreasuryWithdrawalsAction {
    return new TreasuryWithdrawalsAction().fromJsonString(jsonString, options);
  }

  static equals(a: TreasuryWithdrawalsAction | PlainMessage<TreasuryWithdrawalsAction> | undefined, b: TreasuryWithdrawalsAction | PlainMessage<TreasuryWithdrawalsAction> | undefined): boolean {
    return proto3.util.equals(TreasuryWithdrawalsAction, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.WithdrawalAmount
 */
export class WithdrawalAmount extends Message<WithdrawalAmount> {
  /**
   * @generated from field: bytes reward_account = 1;
   */
  rewardAccount = new Uint8Array(0);

  /**
   * @generated from field: uint64 coin = 2;
   */
  coin = protoInt64.zero;

  constructor(data?: PartialMessage<WithdrawalAmount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.WithdrawalAmount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reward_account", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WithdrawalAmount {
    return new WithdrawalAmount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WithdrawalAmount {
    return new WithdrawalAmount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WithdrawalAmount {
    return new WithdrawalAmount().fromJsonString(jsonString, options);
  }

  static equals(a: WithdrawalAmount | PlainMessage<WithdrawalAmount> | undefined, b: WithdrawalAmount | PlainMessage<WithdrawalAmount> | undefined): boolean {
    return proto3.util.equals(WithdrawalAmount, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.NoConfidenceAction
 */
export class NoConfidenceAction extends Message<NoConfidenceAction> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.GovernanceActionId gov_action_id = 1;
   */
  govActionId?: GovernanceActionId;

  constructor(data?: PartialMessage<NoConfidenceAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.NoConfidenceAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gov_action_id", kind: "message", T: GovernanceActionId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NoConfidenceAction {
    return new NoConfidenceAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NoConfidenceAction {
    return new NoConfidenceAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NoConfidenceAction {
    return new NoConfidenceAction().fromJsonString(jsonString, options);
  }

  static equals(a: NoConfidenceAction | PlainMessage<NoConfidenceAction> | undefined, b: NoConfidenceAction | PlainMessage<NoConfidenceAction> | undefined): boolean {
    return proto3.util.equals(NoConfidenceAction, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.UpdateCommitteeAction
 */
export class UpdateCommitteeAction extends Message<UpdateCommitteeAction> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.GovernanceActionId gov_action_id = 1;
   */
  govActionId?: GovernanceActionId;

  /**
   * Committee members to remove (if any)
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.StakeCredential remove_committee_credentials = 2;
   */
  removeCommitteeCredentials: StakeCredential[] = [];

  /**
   * The new committee members
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.NewCommitteeCredentials new_committee_credentials = 3;
   */
  newCommitteeCredentials: NewCommitteeCredentials[] = [];

  /**
   * The required threshold for the committee
   *
   * @generated from field: utxorpc.v1alpha.cardano.RationalNumber new_committee_threshold = 4;
   */
  newCommitteeThreshold?: RationalNumber;

  constructor(data?: PartialMessage<UpdateCommitteeAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.UpdateCommitteeAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gov_action_id", kind: "message", T: GovernanceActionId },
    { no: 2, name: "remove_committee_credentials", kind: "message", T: StakeCredential, repeated: true },
    { no: 3, name: "new_committee_credentials", kind: "message", T: NewCommitteeCredentials, repeated: true },
    { no: 4, name: "new_committee_threshold", kind: "message", T: RationalNumber },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCommitteeAction {
    return new UpdateCommitteeAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCommitteeAction {
    return new UpdateCommitteeAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCommitteeAction {
    return new UpdateCommitteeAction().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCommitteeAction | PlainMessage<UpdateCommitteeAction> | undefined, b: UpdateCommitteeAction | PlainMessage<UpdateCommitteeAction> | undefined): boolean {
    return proto3.util.equals(UpdateCommitteeAction, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.NewConstitutionAction
 */
export class NewConstitutionAction extends Message<NewConstitutionAction> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.GovernanceActionId gov_action_id = 1;
   */
  govActionId?: GovernanceActionId;

  /**
   * The Constitution proposed
   *
   * @generated from field: utxorpc.v1alpha.cardano.Constitution constitution = 2;
   */
  constitution?: Constitution;

  constructor(data?: PartialMessage<NewConstitutionAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.NewConstitutionAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gov_action_id", kind: "message", T: GovernanceActionId },
    { no: 2, name: "constitution", kind: "message", T: Constitution },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewConstitutionAction {
    return new NewConstitutionAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewConstitutionAction {
    return new NewConstitutionAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewConstitutionAction {
    return new NewConstitutionAction().fromJsonString(jsonString, options);
  }

  static equals(a: NewConstitutionAction | PlainMessage<NewConstitutionAction> | undefined, b: NewConstitutionAction | PlainMessage<NewConstitutionAction> | undefined): boolean {
    return proto3.util.equals(NewConstitutionAction, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.Constitution
 */
export class Constitution extends Message<Constitution> {
  /**
   * Anchor to the new document
   *
   * @generated from field: utxorpc.v1alpha.cardano.Anchor anchor = 1;
   */
  anchor?: Anchor;

  /**
   * Hash of the document
   *
   * @generated from field: bytes hash = 2;
   */
  hash = new Uint8Array(0);

  constructor(data?: PartialMessage<Constitution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Constitution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "anchor", kind: "message", T: Anchor },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Constitution {
    return new Constitution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Constitution {
    return new Constitution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Constitution {
    return new Constitution().fromJsonString(jsonString, options);
  }

  static equals(a: Constitution | PlainMessage<Constitution> | undefined, b: Constitution | PlainMessage<Constitution> | undefined): boolean {
    return proto3.util.equals(Constitution, a, b);
  }
}

/**
 * The new committee credential are passed as a map where the key is the committee cold credential hash
 * and the value is the expiration epoch for that credential
 *
 * @generated from message utxorpc.v1alpha.cardano.NewCommitteeCredentials
 */
export class NewCommitteeCredentials extends Message<NewCommitteeCredentials> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential committee_cold_credential = 1;
   */
  committeeColdCredential?: StakeCredential;

  /**
   * @generated from field: uint32 expires_epoch = 2;
   */
  expiresEpoch = 0;

  constructor(data?: PartialMessage<NewCommitteeCredentials>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.NewCommitteeCredentials";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "committee_cold_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "expires_epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewCommitteeCredentials {
    return new NewCommitteeCredentials().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewCommitteeCredentials {
    return new NewCommitteeCredentials().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewCommitteeCredentials {
    return new NewCommitteeCredentials().fromJsonString(jsonString, options);
  }

  static equals(a: NewCommitteeCredentials | PlainMessage<NewCommitteeCredentials> | undefined, b: NewCommitteeCredentials | PlainMessage<NewCommitteeCredentials> | undefined): boolean {
    return proto3.util.equals(NewCommitteeCredentials, a, b);
  }
}

/**
 * Contains the header information for a block.
 *
 * @generated from message utxorpc.v1alpha.cardano.BlockHeader
 */
export class BlockHeader extends Message<BlockHeader> {
  /**
   * Slot number.
   *
   * @generated from field: uint64 slot = 1;
   */
  slot = protoInt64.zero;

  /**
   * Block hash.
   *
   * @generated from field: bytes hash = 2;
   */
  hash = new Uint8Array(0);

  /**
   * Block height.
   *
   * @generated from field: uint64 height = 3;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<BlockHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.BlockHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockHeader {
    return new BlockHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockHeader {
    return new BlockHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockHeader {
    return new BlockHeader().fromJsonString(jsonString, options);
  }

  static equals(a: BlockHeader | PlainMessage<BlockHeader> | undefined, b: BlockHeader | PlainMessage<BlockHeader> | undefined): boolean {
    return proto3.util.equals(BlockHeader, a, b);
  }
}

/**
 * Contains the transaction data for a block.
 *
 * @generated from message utxorpc.v1alpha.cardano.BlockBody
 */
export class BlockBody extends Message<BlockBody> {
  /**
   * List of transactions.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.Tx tx = 1;
   */
  tx: Tx[] = [];

  constructor(data?: PartialMessage<BlockBody>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.BlockBody";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "message", T: Tx, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockBody {
    return new BlockBody().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockBody {
    return new BlockBody().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockBody {
    return new BlockBody().fromJsonString(jsonString, options);
  }

  static equals(a: BlockBody | PlainMessage<BlockBody> | undefined, b: BlockBody | PlainMessage<BlockBody> | undefined): boolean {
    return proto3.util.equals(BlockBody, a, b);
  }
}

/**
 * Represents a complete block, including header and body.
 *
 * @generated from message utxorpc.v1alpha.cardano.Block
 */
export class Block extends Message<Block> {
  /**
   * Block header.
   *
   * @generated from field: utxorpc.v1alpha.cardano.BlockHeader header = 1;
   */
  header?: BlockHeader;

  /**
   * Block body.
   *
   * @generated from field: utxorpc.v1alpha.cardano.BlockBody body = 2;
   */
  body?: BlockBody;

  constructor(data?: PartialMessage<Block>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Block";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: BlockHeader },
    { no: 2, name: "body", kind: "message", T: BlockBody },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block {
    return new Block().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJsonString(jsonString, options);
  }

  static equals(a: Block | PlainMessage<Block> | undefined, b: Block | PlainMessage<Block> | undefined): boolean {
    return proto3.util.equals(Block, a, b);
  }
}

/**
 * Represents a VKey witness used to sign a transaction.
 *
 * @generated from message utxorpc.v1alpha.cardano.VKeyWitness
 */
export class VKeyWitness extends Message<VKeyWitness> {
  /**
   * Verification key.
   *
   * @generated from field: bytes vkey = 1;
   */
  vkey = new Uint8Array(0);

  /**
   * Signature generated using the associated private key.
   *
   * @generated from field: bytes signature = 2;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<VKeyWitness>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.VKeyWitness";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vkey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VKeyWitness {
    return new VKeyWitness().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VKeyWitness {
    return new VKeyWitness().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VKeyWitness {
    return new VKeyWitness().fromJsonString(jsonString, options);
  }

  static equals(a: VKeyWitness | PlainMessage<VKeyWitness> | undefined, b: VKeyWitness | PlainMessage<VKeyWitness> | undefined): boolean {
    return proto3.util.equals(VKeyWitness, a, b);
  }
}

/**
 * Represents a native script in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.NativeScript
 */
export class NativeScript extends Message<NativeScript> {
  /**
   * @generated from oneof utxorpc.v1alpha.cardano.NativeScript.native_script
   */
  nativeScript: {
    /**
     * Script based on an address key hash.
     *
     * @generated from field: bytes script_pubkey = 1;
     */
    value: Uint8Array;
    case: "scriptPubkey";
  } | {
    /**
     * Script that requires all nested scripts to be satisfied.
     *
     * @generated from field: utxorpc.v1alpha.cardano.NativeScriptList script_all = 2;
     */
    value: NativeScriptList;
    case: "scriptAll";
  } | {
    /**
     * Script that requires any of the nested scripts to be satisfied.
     *
     * @generated from field: utxorpc.v1alpha.cardano.NativeScriptList script_any = 3;
     */
    value: NativeScriptList;
    case: "scriptAny";
  } | {
    /**
     * Script that requires k out of n nested scripts to be satisfied.
     *
     * @generated from field: utxorpc.v1alpha.cardano.ScriptNOfK script_n_of_k = 4;
     */
    value: ScriptNOfK;
    case: "scriptNOfK";
  } | {
    /**
     * Slot number before which the script is invalid.
     *
     * @generated from field: uint64 invalid_before = 5;
     */
    value: bigint;
    case: "invalidBefore";
  } | {
    /**
     * Slot number after which the script is invalid.
     *
     * @generated from field: uint64 invalid_hereafter = 6;
     */
    value: bigint;
    case: "invalidHereafter";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<NativeScript>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.NativeScript";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "script_pubkey", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "native_script" },
    { no: 2, name: "script_all", kind: "message", T: NativeScriptList, oneof: "native_script" },
    { no: 3, name: "script_any", kind: "message", T: NativeScriptList, oneof: "native_script" },
    { no: 4, name: "script_n_of_k", kind: "message", T: ScriptNOfK, oneof: "native_script" },
    { no: 5, name: "invalid_before", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "native_script" },
    { no: 6, name: "invalid_hereafter", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "native_script" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NativeScript {
    return new NativeScript().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NativeScript {
    return new NativeScript().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NativeScript {
    return new NativeScript().fromJsonString(jsonString, options);
  }

  static equals(a: NativeScript | PlainMessage<NativeScript> | undefined, b: NativeScript | PlainMessage<NativeScript> | undefined): boolean {
    return proto3.util.equals(NativeScript, a, b);
  }
}

/**
 * Represents a list of native scripts.
 *
 * @generated from message utxorpc.v1alpha.cardano.NativeScriptList
 */
export class NativeScriptList extends Message<NativeScriptList> {
  /**
   * List of native scripts.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.NativeScript items = 1;
   */
  items: NativeScript[] = [];

  constructor(data?: PartialMessage<NativeScriptList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.NativeScriptList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: NativeScript, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NativeScriptList {
    return new NativeScriptList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NativeScriptList {
    return new NativeScriptList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NativeScriptList {
    return new NativeScriptList().fromJsonString(jsonString, options);
  }

  static equals(a: NativeScriptList | PlainMessage<NativeScriptList> | undefined, b: NativeScriptList | PlainMessage<NativeScriptList> | undefined): boolean {
    return proto3.util.equals(NativeScriptList, a, b);
  }
}

/**
 * Represents a "k out of n" native script.
 *
 * @generated from message utxorpc.v1alpha.cardano.ScriptNOfK
 */
export class ScriptNOfK extends Message<ScriptNOfK> {
  /**
   * The number of required satisfied scripts.
   *
   * @generated from field: uint32 k = 1;
   */
  k = 0;

  /**
   * List of native scripts.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.NativeScript scripts = 2;
   */
  scripts: NativeScript[] = [];

  constructor(data?: PartialMessage<ScriptNOfK>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.ScriptNOfK";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "k", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "scripts", kind: "message", T: NativeScript, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScriptNOfK {
    return new ScriptNOfK().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScriptNOfK {
    return new ScriptNOfK().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScriptNOfK {
    return new ScriptNOfK().fromJsonString(jsonString, options);
  }

  static equals(a: ScriptNOfK | PlainMessage<ScriptNOfK> | undefined, b: ScriptNOfK | PlainMessage<ScriptNOfK> | undefined): boolean {
    return proto3.util.equals(ScriptNOfK, a, b);
  }
}

/**
 * Represents a constructor for Plutus data in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.Constr
 */
export class Constr extends Message<Constr> {
  /**
   * @generated from field: uint32 tag = 1;
   */
  tag = 0;

  /**
   * @generated from field: uint64 any_constructor = 2;
   */
  anyConstructor = protoInt64.zero;

  /**
   * @generated from field: repeated utxorpc.v1alpha.cardano.PlutusData fields = 3;
   */
  fields: PlutusData[] = [];

  constructor(data?: PartialMessage<Constr>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Constr";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "any_constructor", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "fields", kind: "message", T: PlutusData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Constr {
    return new Constr().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Constr {
    return new Constr().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Constr {
    return new Constr().fromJsonString(jsonString, options);
  }

  static equals(a: Constr | PlainMessage<Constr> | undefined, b: Constr | PlainMessage<Constr> | undefined): boolean {
    return proto3.util.equals(Constr, a, b);
  }
}

/**
 * Represents a big integer for Plutus data in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.BigInt
 */
export class BigInt extends Message<BigInt> {
  /**
   * @generated from oneof utxorpc.v1alpha.cardano.BigInt.big_int
   */
  bigInt: {
    /**
     * @generated from field: int64 int = 1;
     */
    value: bigint;
    case: "int";
  } | {
    /**
     * @generated from field: bytes big_u_int = 2;
     */
    value: Uint8Array;
    case: "bigUInt";
  } | {
    /**
     * @generated from field: bytes big_n_int = 3;
     */
    value: Uint8Array;
    case: "bigNInt";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<BigInt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.BigInt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "int", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "big_int" },
    { no: 2, name: "big_u_int", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "big_int" },
    { no: 3, name: "big_n_int", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "big_int" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigInt {
    return new BigInt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigInt {
    return new BigInt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigInt {
    return new BigInt().fromJsonString(jsonString, options);
  }

  static equals(a: BigInt | PlainMessage<BigInt> | undefined, b: BigInt | PlainMessage<BigInt> | undefined): boolean {
    return proto3.util.equals(BigInt, a, b);
  }
}

/**
 * Represents a key-value pair for Plutus data in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PlutusDataPair
 */
export class PlutusDataPair extends Message<PlutusDataPair> {
  /**
   * Key of the pair.
   *
   * @generated from field: utxorpc.v1alpha.cardano.PlutusData key = 1;
   */
  key?: PlutusData;

  /**
   * Value of the pair.
   *
   * @generated from field: utxorpc.v1alpha.cardano.PlutusData value = 2;
   */
  value?: PlutusData;

  constructor(data?: PartialMessage<PlutusDataPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.PlutusDataPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: PlutusData },
    { no: 2, name: "value", kind: "message", T: PlutusData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlutusDataPair {
    return new PlutusDataPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlutusDataPair {
    return new PlutusDataPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlutusDataPair {
    return new PlutusDataPair().fromJsonString(jsonString, options);
  }

  static equals(a: PlutusDataPair | PlainMessage<PlutusDataPair> | undefined, b: PlutusDataPair | PlainMessage<PlutusDataPair> | undefined): boolean {
    return proto3.util.equals(PlutusDataPair, a, b);
  }
}

/**
 * Represents a Plutus data item in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PlutusData
 */
export class PlutusData extends Message<PlutusData> {
  /**
   * @generated from oneof utxorpc.v1alpha.cardano.PlutusData.plutus_data
   */
  plutusData: {
    /**
     * Constructor.
     *
     * @generated from field: utxorpc.v1alpha.cardano.Constr constr = 2;
     */
    value: Constr;
    case: "constr";
  } | {
    /**
     * Map of Plutus data.
     *
     * @generated from field: utxorpc.v1alpha.cardano.PlutusDataMap map = 3;
     */
    value: PlutusDataMap;
    case: "map";
  } | {
    /**
     * Big integer.
     *
     * @generated from field: utxorpc.v1alpha.cardano.BigInt big_int = 4;
     */
    value: BigInt;
    case: "bigInt";
  } | {
    /**
     * Bounded bytes.
     *
     * @generated from field: bytes bounded_bytes = 5;
     */
    value: Uint8Array;
    case: "boundedBytes";
  } | {
    /**
     * Array of Plutus data.
     *
     * @generated from field: utxorpc.v1alpha.cardano.PlutusDataArray array = 6;
     */
    value: PlutusDataArray;
    case: "array";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PlutusData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.PlutusData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "constr", kind: "message", T: Constr, oneof: "plutus_data" },
    { no: 3, name: "map", kind: "message", T: PlutusDataMap, oneof: "plutus_data" },
    { no: 4, name: "big_int", kind: "message", T: BigInt, oneof: "plutus_data" },
    { no: 5, name: "bounded_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "plutus_data" },
    { no: 6, name: "array", kind: "message", T: PlutusDataArray, oneof: "plutus_data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlutusData {
    return new PlutusData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlutusData {
    return new PlutusData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlutusData {
    return new PlutusData().fromJsonString(jsonString, options);
  }

  static equals(a: PlutusData | PlainMessage<PlutusData> | undefined, b: PlutusData | PlainMessage<PlutusData> | undefined): boolean {
    return proto3.util.equals(PlutusData, a, b);
  }
}

/**
 * Represents a map of Plutus data in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PlutusDataMap
 */
export class PlutusDataMap extends Message<PlutusDataMap> {
  /**
   * List of key-value pairs.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.PlutusDataPair pairs = 1;
   */
  pairs: PlutusDataPair[] = [];

  constructor(data?: PartialMessage<PlutusDataMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.PlutusDataMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pairs", kind: "message", T: PlutusDataPair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlutusDataMap {
    return new PlutusDataMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlutusDataMap {
    return new PlutusDataMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlutusDataMap {
    return new PlutusDataMap().fromJsonString(jsonString, options);
  }

  static equals(a: PlutusDataMap | PlainMessage<PlutusDataMap> | undefined, b: PlutusDataMap | PlainMessage<PlutusDataMap> | undefined): boolean {
    return proto3.util.equals(PlutusDataMap, a, b);
  }
}

/**
 * Represents an array of Plutus data in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PlutusDataArray
 */
export class PlutusDataArray extends Message<PlutusDataArray> {
  /**
   * List of Plutus data items.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.PlutusData items = 1;
   */
  items: PlutusData[] = [];

  constructor(data?: PartialMessage<PlutusDataArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.PlutusDataArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: PlutusData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlutusDataArray {
    return new PlutusDataArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlutusDataArray {
    return new PlutusDataArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlutusDataArray {
    return new PlutusDataArray().fromJsonString(jsonString, options);
  }

  static equals(a: PlutusDataArray | PlainMessage<PlutusDataArray> | undefined, b: PlutusDataArray | PlainMessage<PlutusDataArray> | undefined): boolean {
    return proto3.util.equals(PlutusDataArray, a, b);
  }
}

/**
 * Represents a script in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.Script
 */
export class Script extends Message<Script> {
  /**
   * @generated from oneof utxorpc.v1alpha.cardano.Script.script
   */
  script: {
    /**
     * Native script.
     *
     * @generated from field: utxorpc.v1alpha.cardano.NativeScript native = 1;
     */
    value: NativeScript;
    case: "native";
  } | {
    /**
     * Plutus V1 script.
     *
     * @generated from field: bytes plutus_v1 = 2;
     */
    value: Uint8Array;
    case: "plutusV1";
  } | {
    /**
     * Plutus V2 script.
     *
     * @generated from field: bytes plutus_v2 = 3;
     */
    value: Uint8Array;
    case: "plutusV2";
  } | {
    /**
     * Plutus V3 script.
     *
     * @generated from field: bytes plutus_v3 = 4;
     */
    value: Uint8Array;
    case: "plutusV3";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Script>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Script";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "native", kind: "message", T: NativeScript, oneof: "script" },
    { no: 2, name: "plutus_v1", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "script" },
    { no: 3, name: "plutus_v2", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "script" },
    { no: 4, name: "plutus_v3", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "script" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Script {
    return new Script().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Script {
    return new Script().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Script {
    return new Script().fromJsonString(jsonString, options);
  }

  static equals(a: Script | PlainMessage<Script> | undefined, b: Script | PlainMessage<Script> | undefined): boolean {
    return proto3.util.equals(Script, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.Metadatum
 */
export class Metadatum extends Message<Metadatum> {
  /**
   * @generated from oneof utxorpc.v1alpha.cardano.Metadatum.metadatum
   */
  metadatum: {
    /**
     * @generated from field: int64 int = 1;
     */
    value: bigint;
    case: "int";
  } | {
    /**
     * @generated from field: bytes bytes = 2;
     */
    value: Uint8Array;
    case: "bytes";
  } | {
    /**
     * @generated from field: string text = 3;
     */
    value: string;
    case: "text";
  } | {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.MetadatumArray array = 4;
     */
    value: MetadatumArray;
    case: "array";
  } | {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.MetadatumMap map = 5;
     */
    value: MetadatumMap;
    case: "map";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Metadatum>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Metadatum";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "int", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "metadatum" },
    { no: 2, name: "bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "metadatum" },
    { no: 3, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "metadatum" },
    { no: 4, name: "array", kind: "message", T: MetadatumArray, oneof: "metadatum" },
    { no: 5, name: "map", kind: "message", T: MetadatumMap, oneof: "metadatum" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadatum {
    return new Metadatum().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadatum {
    return new Metadatum().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadatum {
    return new Metadatum().fromJsonString(jsonString, options);
  }

  static equals(a: Metadatum | PlainMessage<Metadatum> | undefined, b: Metadatum | PlainMessage<Metadatum> | undefined): boolean {
    return proto3.util.equals(Metadatum, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.MetadatumArray
 */
export class MetadatumArray extends Message<MetadatumArray> {
  /**
   * @generated from field: repeated utxorpc.v1alpha.cardano.Metadatum items = 1;
   */
  items: Metadatum[] = [];

  constructor(data?: PartialMessage<MetadatumArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.MetadatumArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Metadatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadatumArray {
    return new MetadatumArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadatumArray {
    return new MetadatumArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadatumArray {
    return new MetadatumArray().fromJsonString(jsonString, options);
  }

  static equals(a: MetadatumArray | PlainMessage<MetadatumArray> | undefined, b: MetadatumArray | PlainMessage<MetadatumArray> | undefined): boolean {
    return proto3.util.equals(MetadatumArray, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.MetadatumMap
 */
export class MetadatumMap extends Message<MetadatumMap> {
  /**
   * @generated from field: repeated utxorpc.v1alpha.cardano.MetadatumPair pairs = 1;
   */
  pairs: MetadatumPair[] = [];

  constructor(data?: PartialMessage<MetadatumMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.MetadatumMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pairs", kind: "message", T: MetadatumPair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadatumMap {
    return new MetadatumMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadatumMap {
    return new MetadatumMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadatumMap {
    return new MetadatumMap().fromJsonString(jsonString, options);
  }

  static equals(a: MetadatumMap | PlainMessage<MetadatumMap> | undefined, b: MetadatumMap | PlainMessage<MetadatumMap> | undefined): boolean {
    return proto3.util.equals(MetadatumMap, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.MetadatumPair
 */
export class MetadatumPair extends Message<MetadatumPair> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.Metadatum key = 1;
   */
  key?: Metadatum;

  /**
   * @generated from field: utxorpc.v1alpha.cardano.Metadatum value = 2;
   */
  value?: Metadatum;

  constructor(data?: PartialMessage<MetadatumPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.MetadatumPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: Metadatum },
    { no: 2, name: "value", kind: "message", T: Metadatum },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadatumPair {
    return new MetadatumPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadatumPair {
    return new MetadatumPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadatumPair {
    return new MetadatumPair().fromJsonString(jsonString, options);
  }

  static equals(a: MetadatumPair | PlainMessage<MetadatumPair> | undefined, b: MetadatumPair | PlainMessage<MetadatumPair> | undefined): boolean {
    return proto3.util.equals(MetadatumPair, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.Metadata
 */
export class Metadata extends Message<Metadata> {
  /**
   * @generated from field: uint64 label = 1;
   */
  label = protoInt64.zero;

  /**
   * @generated from field: utxorpc.v1alpha.cardano.Metadatum value = 2;
   */
  value?: Metadatum;

  constructor(data?: PartialMessage<Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "label", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "value", kind: "message", T: Metadatum },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata {
    return new Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean {
    return proto3.util.equals(Metadata, a, b);
  }
}

/**
 * Represents a stake credential in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.StakeCredential
 */
export class StakeCredential extends Message<StakeCredential> {
  /**
   * @generated from oneof utxorpc.v1alpha.cardano.StakeCredential.stake_credential
   */
  stakeCredential: {
    /**
     * Address key hash.
     *
     * @generated from field: bytes addr_key_hash = 1;
     */
    value: Uint8Array;
    case: "addrKeyHash";
  } | {
    /**
     * Script hash.
     *
     * @generated from field: bytes script_hash = 2;
     */
    value: Uint8Array;
    case: "scriptHash";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StakeCredential>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.StakeCredential";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "addr_key_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "stake_credential" },
    { no: 2, name: "script_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "stake_credential" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakeCredential {
    return new StakeCredential().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakeCredential {
    return new StakeCredential().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakeCredential {
    return new StakeCredential().fromJsonString(jsonString, options);
  }

  static equals(a: StakeCredential | PlainMessage<StakeCredential> | undefined, b: StakeCredential | PlainMessage<StakeCredential> | undefined): boolean {
    return proto3.util.equals(StakeCredential, a, b);
  }
}

/**
 * Represents a rational number as a fraction.
 *
 * @generated from message utxorpc.v1alpha.cardano.RationalNumber
 */
export class RationalNumber extends Message<RationalNumber> {
  /**
   * @generated from field: int32 numerator = 1;
   */
  numerator = 0;

  /**
   * @generated from field: uint32 denominator = 2;
   */
  denominator = 0;

  constructor(data?: PartialMessage<RationalNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.RationalNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numerator", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "denominator", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RationalNumber {
    return new RationalNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RationalNumber {
    return new RationalNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RationalNumber {
    return new RationalNumber().fromJsonString(jsonString, options);
  }

  static equals(a: RationalNumber | PlainMessage<RationalNumber> | undefined, b: RationalNumber | PlainMessage<RationalNumber> | undefined): boolean {
    return proto3.util.equals(RationalNumber, a, b);
  }
}

/**
 * Represents a relay in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.Relay
 */
export class Relay extends Message<Relay> {
  /**
   * @generated from field: bytes ip_v4 = 1;
   */
  ipV4 = new Uint8Array(0);

  /**
   * @generated from field: bytes ip_v6 = 2;
   */
  ipV6 = new Uint8Array(0);

  /**
   * @generated from field: string dns_name = 3;
   */
  dnsName = "";

  /**
   * @generated from field: uint32 port = 4;
   */
  port = 0;

  constructor(data?: PartialMessage<Relay>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Relay";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ip_v4", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "ip_v6", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "dns_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Relay {
    return new Relay().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Relay {
    return new Relay().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Relay {
    return new Relay().fromJsonString(jsonString, options);
  }

  static equals(a: Relay | PlainMessage<Relay> | undefined, b: Relay | PlainMessage<Relay> | undefined): boolean {
    return proto3.util.equals(Relay, a, b);
  }
}

/**
 * Represents pool metadata in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PoolMetadata
 */
export class PoolMetadata extends Message<PoolMetadata> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: bytes hash = 2;
   */
  hash = new Uint8Array(0);

  constructor(data?: PartialMessage<PoolMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.PoolMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolMetadata {
    return new PoolMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolMetadata {
    return new PoolMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolMetadata {
    return new PoolMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: PoolMetadata | PlainMessage<PoolMetadata> | undefined, b: PoolMetadata | PlainMessage<PoolMetadata> | undefined): boolean {
    return proto3.util.equals(PoolMetadata, a, b);
  }
}

/**
 * Represents a certificate in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.Certificate
 */
export class Certificate extends Message<Certificate> {
  /**
   * @generated from oneof utxorpc.v1alpha.cardano.Certificate.certificate
   */
  certificate: {
    /**
     * Stake registration certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_registration = 1;
     */
    value: StakeCredential;
    case: "stakeRegistration";
  } | {
    /**
     * Stake deregistration certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_deregistration = 2;
     */
    value: StakeCredential;
    case: "stakeDeregistration";
  } | {
    /**
     * Stake delegation certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.StakeDelegationCert stake_delegation = 3;
     */
    value: StakeDelegationCert;
    case: "stakeDelegation";
  } | {
    /**
     * Pool registration certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.PoolRegistrationCert pool_registration = 4;
     */
    value: PoolRegistrationCert;
    case: "poolRegistration";
  } | {
    /**
     * Pool retirement certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.PoolRetirementCert pool_retirement = 5;
     */
    value: PoolRetirementCert;
    case: "poolRetirement";
  } | {
    /**
     * Genesis key delegation certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.GenesisKeyDelegationCert genesis_key_delegation = 6;
     */
    value: GenesisKeyDelegationCert;
    case: "genesisKeyDelegation";
  } | {
    /**
     * Move instantaneous rewards certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.MirCert mir_cert = 7;
     */
    value: MirCert;
    case: "mirCert";
  } | {
    /**
     * Registration certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.RegCert reg_cert = 8;
     */
    value: RegCert;
    case: "regCert";
  } | {
    /**
     * Unregistration certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.UnRegCert unreg_cert = 9;
     */
    value: UnRegCert;
    case: "unregCert";
  } | {
    /**
     * Vote delegation certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.VoteDelegCert vote_deleg_cert = 10;
     */
    value: VoteDelegCert;
    case: "voteDelegCert";
  } | {
    /**
     * Stake and vote delegation certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.StakeVoteDelegCert stake_vote_deleg_cert = 11;
     */
    value: StakeVoteDelegCert;
    case: "stakeVoteDelegCert";
  } | {
    /**
     * Stake registration and delegation certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.StakeRegDelegCert stake_reg_deleg_cert = 12;
     */
    value: StakeRegDelegCert;
    case: "stakeRegDelegCert";
  } | {
    /**
     * Vote registration and delegation certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.VoteRegDelegCert vote_reg_deleg_cert = 13;
     */
    value: VoteRegDelegCert;
    case: "voteRegDelegCert";
  } | {
    /**
     * Stake and vote registration and delegation certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.StakeVoteRegDelegCert stake_vote_reg_deleg_cert = 14;
     */
    value: StakeVoteRegDelegCert;
    case: "stakeVoteRegDelegCert";
  } | {
    /**
     * Authorize committee hot key certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.AuthCommitteeHotCert auth_committee_hot_cert = 15;
     */
    value: AuthCommitteeHotCert;
    case: "authCommitteeHotCert";
  } | {
    /**
     * Resign committee cold key certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.ResignCommitteeColdCert resign_committee_cold_cert = 16;
     */
    value: ResignCommitteeColdCert;
    case: "resignCommitteeColdCert";
  } | {
    /**
     * Register DRep certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.RegDRepCert reg_drep_cert = 17;
     */
    value: RegDRepCert;
    case: "regDrepCert";
  } | {
    /**
     * Unregister DRep certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.UnRegDRepCert unreg_drep_cert = 18;
     */
    value: UnRegDRepCert;
    case: "unregDrepCert";
  } | {
    /**
     * Update DRep certificate.
     *
     * @generated from field: utxorpc.v1alpha.cardano.UpdateDRepCert update_drep_cert = 19;
     */
    value: UpdateDRepCert;
    case: "updateDrepCert";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Redeemer for the Plutus script.
   *
   * @generated from field: utxorpc.v1alpha.cardano.Redeemer redeemer = 100;
   */
  redeemer?: Redeemer;

  constructor(data?: PartialMessage<Certificate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Certificate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stake_registration", kind: "message", T: StakeCredential, oneof: "certificate" },
    { no: 2, name: "stake_deregistration", kind: "message", T: StakeCredential, oneof: "certificate" },
    { no: 3, name: "stake_delegation", kind: "message", T: StakeDelegationCert, oneof: "certificate" },
    { no: 4, name: "pool_registration", kind: "message", T: PoolRegistrationCert, oneof: "certificate" },
    { no: 5, name: "pool_retirement", kind: "message", T: PoolRetirementCert, oneof: "certificate" },
    { no: 6, name: "genesis_key_delegation", kind: "message", T: GenesisKeyDelegationCert, oneof: "certificate" },
    { no: 7, name: "mir_cert", kind: "message", T: MirCert, oneof: "certificate" },
    { no: 8, name: "reg_cert", kind: "message", T: RegCert, oneof: "certificate" },
    { no: 9, name: "unreg_cert", kind: "message", T: UnRegCert, oneof: "certificate" },
    { no: 10, name: "vote_deleg_cert", kind: "message", T: VoteDelegCert, oneof: "certificate" },
    { no: 11, name: "stake_vote_deleg_cert", kind: "message", T: StakeVoteDelegCert, oneof: "certificate" },
    { no: 12, name: "stake_reg_deleg_cert", kind: "message", T: StakeRegDelegCert, oneof: "certificate" },
    { no: 13, name: "vote_reg_deleg_cert", kind: "message", T: VoteRegDelegCert, oneof: "certificate" },
    { no: 14, name: "stake_vote_reg_deleg_cert", kind: "message", T: StakeVoteRegDelegCert, oneof: "certificate" },
    { no: 15, name: "auth_committee_hot_cert", kind: "message", T: AuthCommitteeHotCert, oneof: "certificate" },
    { no: 16, name: "resign_committee_cold_cert", kind: "message", T: ResignCommitteeColdCert, oneof: "certificate" },
    { no: 17, name: "reg_drep_cert", kind: "message", T: RegDRepCert, oneof: "certificate" },
    { no: 18, name: "unreg_drep_cert", kind: "message", T: UnRegDRepCert, oneof: "certificate" },
    { no: 19, name: "update_drep_cert", kind: "message", T: UpdateDRepCert, oneof: "certificate" },
    { no: 100, name: "redeemer", kind: "message", T: Redeemer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Certificate {
    return new Certificate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Certificate {
    return new Certificate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Certificate {
    return new Certificate().fromJsonString(jsonString, options);
  }

  static equals(a: Certificate | PlainMessage<Certificate> | undefined, b: Certificate | PlainMessage<Certificate> | undefined): boolean {
    return proto3.util.equals(Certificate, a, b);
  }
}

/**
 * Represents a stake delegation certificate in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.StakeDelegationCert
 */
export class StakeDelegationCert extends Message<StakeDelegationCert> {
  /**
   * Stake credential.
   *
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
   */
  stakeCredential?: StakeCredential;

  /**
   * Pool key hash.
   *
   * @generated from field: bytes pool_keyhash = 2;
   */
  poolKeyhash = new Uint8Array(0);

  constructor(data?: PartialMessage<StakeDelegationCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.StakeDelegationCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stake_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "pool_keyhash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakeDelegationCert {
    return new StakeDelegationCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakeDelegationCert {
    return new StakeDelegationCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakeDelegationCert {
    return new StakeDelegationCert().fromJsonString(jsonString, options);
  }

  static equals(a: StakeDelegationCert | PlainMessage<StakeDelegationCert> | undefined, b: StakeDelegationCert | PlainMessage<StakeDelegationCert> | undefined): boolean {
    return proto3.util.equals(StakeDelegationCert, a, b);
  }
}

/**
 * Represents a pool registration certificate in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PoolRegistrationCert
 */
export class PoolRegistrationCert extends Message<PoolRegistrationCert> {
  /**
   * Operator key hash.
   *
   * @generated from field: bytes operator = 1;
   */
  operator = new Uint8Array(0);

  /**
   * VRF key hash.
   *
   * @generated from field: bytes vrf_keyhash = 2;
   */
  vrfKeyhash = new Uint8Array(0);

  /**
   * Pledge amount.
   *
   * @generated from field: uint64 pledge = 3;
   */
  pledge = protoInt64.zero;

  /**
   * Pool cost.
   *
   * @generated from field: uint64 cost = 4;
   */
  cost = protoInt64.zero;

  /**
   * Pool margin.
   *
   * @generated from field: utxorpc.v1alpha.cardano.RationalNumber margin = 5;
   */
  margin?: RationalNumber;

  /**
   * Reward account.
   *
   * @generated from field: bytes reward_account = 6;
   */
  rewardAccount = new Uint8Array(0);

  /**
   * List of pool owner key hashes.
   *
   * @generated from field: repeated bytes pool_owners = 7;
   */
  poolOwners: Uint8Array[] = [];

  /**
   * List of relays.
   *
   * @generated from field: repeated utxorpc.v1alpha.cardano.Relay relays = 8;
   */
  relays: Relay[] = [];

  /**
   * Pool metadata.
   *
   * @generated from field: utxorpc.v1alpha.cardano.PoolMetadata pool_metadata = 9;
   */
  poolMetadata?: PoolMetadata;

  constructor(data?: PartialMessage<PoolRegistrationCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.PoolRegistrationCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "vrf_keyhash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "pledge", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "cost", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "margin", kind: "message", T: RationalNumber },
    { no: 6, name: "reward_account", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "pool_owners", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 8, name: "relays", kind: "message", T: Relay, repeated: true },
    { no: 9, name: "pool_metadata", kind: "message", T: PoolMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRegistrationCert {
    return new PoolRegistrationCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRegistrationCert {
    return new PoolRegistrationCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRegistrationCert {
    return new PoolRegistrationCert().fromJsonString(jsonString, options);
  }

  static equals(a: PoolRegistrationCert | PlainMessage<PoolRegistrationCert> | undefined, b: PoolRegistrationCert | PlainMessage<PoolRegistrationCert> | undefined): boolean {
    return proto3.util.equals(PoolRegistrationCert, a, b);
  }
}

/**
 * Represents a pool retirement certificate in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PoolRetirementCert
 */
export class PoolRetirementCert extends Message<PoolRetirementCert> {
  /**
   * Pool key hash.
   *
   * @generated from field: bytes pool_keyhash = 1;
   */
  poolKeyhash = new Uint8Array(0);

  /**
   * Retirement epoch.
   *
   * @generated from field: uint64 epoch = 2;
   */
  epoch = protoInt64.zero;

  constructor(data?: PartialMessage<PoolRetirementCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.PoolRetirementCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_keyhash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRetirementCert {
    return new PoolRetirementCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRetirementCert {
    return new PoolRetirementCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRetirementCert {
    return new PoolRetirementCert().fromJsonString(jsonString, options);
  }

  static equals(a: PoolRetirementCert | PlainMessage<PoolRetirementCert> | undefined, b: PoolRetirementCert | PlainMessage<PoolRetirementCert> | undefined): boolean {
    return proto3.util.equals(PoolRetirementCert, a, b);
  }
}

/**
 * Represents a genesis key delegation certificate in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.GenesisKeyDelegationCert
 */
export class GenesisKeyDelegationCert extends Message<GenesisKeyDelegationCert> {
  /**
   * Genesis hash.
   *
   * @generated from field: bytes genesis_hash = 1;
   */
  genesisHash = new Uint8Array(0);

  /**
   * Genesis delegate hash.
   *
   * @generated from field: bytes genesis_delegate_hash = 2;
   */
  genesisDelegateHash = new Uint8Array(0);

  /**
   * VRF key hash.
   *
   * @generated from field: bytes vrf_keyhash = 3;
   */
  vrfKeyhash = new Uint8Array(0);

  constructor(data?: PartialMessage<GenesisKeyDelegationCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.GenesisKeyDelegationCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "genesis_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "genesis_delegate_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "vrf_keyhash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisKeyDelegationCert {
    return new GenesisKeyDelegationCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisKeyDelegationCert {
    return new GenesisKeyDelegationCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisKeyDelegationCert {
    return new GenesisKeyDelegationCert().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisKeyDelegationCert | PlainMessage<GenesisKeyDelegationCert> | undefined, b: GenesisKeyDelegationCert | PlainMessage<GenesisKeyDelegationCert> | undefined): boolean {
    return proto3.util.equals(GenesisKeyDelegationCert, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.MirTarget
 */
export class MirTarget extends Message<MirTarget> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
   */
  stakeCredential?: StakeCredential;

  /**
   * @generated from field: int64 delta_coin = 2;
   */
  deltaCoin = protoInt64.zero;

  constructor(data?: PartialMessage<MirTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.MirTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stake_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "delta_coin", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MirTarget {
    return new MirTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MirTarget {
    return new MirTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MirTarget {
    return new MirTarget().fromJsonString(jsonString, options);
  }

  static equals(a: MirTarget | PlainMessage<MirTarget> | undefined, b: MirTarget | PlainMessage<MirTarget> | undefined): boolean {
    return proto3.util.equals(MirTarget, a, b);
  }
}

/**
 * Represents a move instantaneous reward certificate in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.MirCert
 */
export class MirCert extends Message<MirCert> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.MirSource from = 1;
   */
  from = MirSource.UNSPECIFIED;

  /**
   * @generated from field: repeated utxorpc.v1alpha.cardano.MirTarget to = 2;
   */
  to: MirTarget[] = [];

  /**
   * @generated from field: uint64 other_pot = 3;
   */
  otherPot = protoInt64.zero;

  constructor(data?: PartialMessage<MirCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.MirCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "enum", T: proto3.getEnumType(MirSource) },
    { no: 2, name: "to", kind: "message", T: MirTarget, repeated: true },
    { no: 3, name: "other_pot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MirCert {
    return new MirCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MirCert {
    return new MirCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MirCert {
    return new MirCert().fromJsonString(jsonString, options);
  }

  static equals(a: MirCert | PlainMessage<MirCert> | undefined, b: MirCert | PlainMessage<MirCert> | undefined): boolean {
    return proto3.util.equals(MirCert, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.RegCert
 */
export class RegCert extends Message<RegCert> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
   */
  stakeCredential?: StakeCredential;

  /**
   * @generated from field: uint64 coin = 2;
   */
  coin = protoInt64.zero;

  constructor(data?: PartialMessage<RegCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.RegCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stake_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegCert {
    return new RegCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegCert {
    return new RegCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegCert {
    return new RegCert().fromJsonString(jsonString, options);
  }

  static equals(a: RegCert | PlainMessage<RegCert> | undefined, b: RegCert | PlainMessage<RegCert> | undefined): boolean {
    return proto3.util.equals(RegCert, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.UnRegCert
 */
export class UnRegCert extends Message<UnRegCert> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
   */
  stakeCredential?: StakeCredential;

  /**
   * @generated from field: uint64 coin = 2;
   */
  coin = protoInt64.zero;

  constructor(data?: PartialMessage<UnRegCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.UnRegCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stake_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnRegCert {
    return new UnRegCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnRegCert {
    return new UnRegCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnRegCert {
    return new UnRegCert().fromJsonString(jsonString, options);
  }

  static equals(a: UnRegCert | PlainMessage<UnRegCert> | undefined, b: UnRegCert | PlainMessage<UnRegCert> | undefined): boolean {
    return proto3.util.equals(UnRegCert, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.DRep
 */
export class DRep extends Message<DRep> {
  /**
   * @generated from oneof utxorpc.v1alpha.cardano.DRep.drep
   */
  drep: {
    /**
     * Address key hash
     *
     * @generated from field: bytes addr_key_hash = 1;
     */
    value: Uint8Array;
    case: "addrKeyHash";
  } | {
    /**
     * Script hash
     *
     * @generated from field: bytes script_hash = 2;
     */
    value: Uint8Array;
    case: "scriptHash";
  } | {
    /**
     * Abstain
     *
     * @generated from field: bool abstain = 3;
     */
    value: boolean;
    case: "abstain";
  } | {
    /**
     * No confidence
     *
     * @generated from field: bool no_confidence = 4;
     */
    value: boolean;
    case: "noConfidence";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DRep>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.DRep";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "addr_key_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "drep" },
    { no: 2, name: "script_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "drep" },
    { no: 3, name: "abstain", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "drep" },
    { no: 4, name: "no_confidence", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "drep" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DRep {
    return new DRep().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DRep {
    return new DRep().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DRep {
    return new DRep().fromJsonString(jsonString, options);
  }

  static equals(a: DRep | PlainMessage<DRep> | undefined, b: DRep | PlainMessage<DRep> | undefined): boolean {
    return proto3.util.equals(DRep, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.VoteDelegCert
 */
export class VoteDelegCert extends Message<VoteDelegCert> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
   */
  stakeCredential?: StakeCredential;

  /**
   * @generated from field: utxorpc.v1alpha.cardano.DRep drep = 2;
   */
  drep?: DRep;

  constructor(data?: PartialMessage<VoteDelegCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.VoteDelegCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stake_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "drep", kind: "message", T: DRep },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteDelegCert {
    return new VoteDelegCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteDelegCert {
    return new VoteDelegCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteDelegCert {
    return new VoteDelegCert().fromJsonString(jsonString, options);
  }

  static equals(a: VoteDelegCert | PlainMessage<VoteDelegCert> | undefined, b: VoteDelegCert | PlainMessage<VoteDelegCert> | undefined): boolean {
    return proto3.util.equals(VoteDelegCert, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.StakeVoteDelegCert
 */
export class StakeVoteDelegCert extends Message<StakeVoteDelegCert> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
   */
  stakeCredential?: StakeCredential;

  /**
   * @generated from field: bytes pool_keyhash = 2;
   */
  poolKeyhash = new Uint8Array(0);

  /**
   * @generated from field: utxorpc.v1alpha.cardano.DRep drep = 3;
   */
  drep?: DRep;

  constructor(data?: PartialMessage<StakeVoteDelegCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.StakeVoteDelegCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stake_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "pool_keyhash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "drep", kind: "message", T: DRep },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakeVoteDelegCert {
    return new StakeVoteDelegCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakeVoteDelegCert {
    return new StakeVoteDelegCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakeVoteDelegCert {
    return new StakeVoteDelegCert().fromJsonString(jsonString, options);
  }

  static equals(a: StakeVoteDelegCert | PlainMessage<StakeVoteDelegCert> | undefined, b: StakeVoteDelegCert | PlainMessage<StakeVoteDelegCert> | undefined): boolean {
    return proto3.util.equals(StakeVoteDelegCert, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.StakeRegDelegCert
 */
export class StakeRegDelegCert extends Message<StakeRegDelegCert> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
   */
  stakeCredential?: StakeCredential;

  /**
   * @generated from field: bytes pool_keyhash = 2;
   */
  poolKeyhash = new Uint8Array(0);

  /**
   * @generated from field: uint64 coin = 3;
   */
  coin = protoInt64.zero;

  constructor(data?: PartialMessage<StakeRegDelegCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.StakeRegDelegCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stake_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "pool_keyhash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakeRegDelegCert {
    return new StakeRegDelegCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakeRegDelegCert {
    return new StakeRegDelegCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakeRegDelegCert {
    return new StakeRegDelegCert().fromJsonString(jsonString, options);
  }

  static equals(a: StakeRegDelegCert | PlainMessage<StakeRegDelegCert> | undefined, b: StakeRegDelegCert | PlainMessage<StakeRegDelegCert> | undefined): boolean {
    return proto3.util.equals(StakeRegDelegCert, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.VoteRegDelegCert
 */
export class VoteRegDelegCert extends Message<VoteRegDelegCert> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
   */
  stakeCredential?: StakeCredential;

  /**
   * @generated from field: utxorpc.v1alpha.cardano.DRep drep = 2;
   */
  drep?: DRep;

  /**
   * @generated from field: uint64 coin = 3;
   */
  coin = protoInt64.zero;

  constructor(data?: PartialMessage<VoteRegDelegCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.VoteRegDelegCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stake_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "drep", kind: "message", T: DRep },
    { no: 3, name: "coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteRegDelegCert {
    return new VoteRegDelegCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteRegDelegCert {
    return new VoteRegDelegCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteRegDelegCert {
    return new VoteRegDelegCert().fromJsonString(jsonString, options);
  }

  static equals(a: VoteRegDelegCert | PlainMessage<VoteRegDelegCert> | undefined, b: VoteRegDelegCert | PlainMessage<VoteRegDelegCert> | undefined): boolean {
    return proto3.util.equals(VoteRegDelegCert, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.StakeVoteRegDelegCert
 */
export class StakeVoteRegDelegCert extends Message<StakeVoteRegDelegCert> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
   */
  stakeCredential?: StakeCredential;

  /**
   * @generated from field: bytes pool_keyhash = 2;
   */
  poolKeyhash = new Uint8Array(0);

  /**
   * @generated from field: utxorpc.v1alpha.cardano.DRep drep = 3;
   */
  drep?: DRep;

  /**
   * @generated from field: uint64 coin = 4;
   */
  coin = protoInt64.zero;

  constructor(data?: PartialMessage<StakeVoteRegDelegCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.StakeVoteRegDelegCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stake_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "pool_keyhash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "drep", kind: "message", T: DRep },
    { no: 4, name: "coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakeVoteRegDelegCert {
    return new StakeVoteRegDelegCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakeVoteRegDelegCert {
    return new StakeVoteRegDelegCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakeVoteRegDelegCert {
    return new StakeVoteRegDelegCert().fromJsonString(jsonString, options);
  }

  static equals(a: StakeVoteRegDelegCert | PlainMessage<StakeVoteRegDelegCert> | undefined, b: StakeVoteRegDelegCert | PlainMessage<StakeVoteRegDelegCert> | undefined): boolean {
    return proto3.util.equals(StakeVoteRegDelegCert, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.AuthCommitteeHotCert
 */
export class AuthCommitteeHotCert extends Message<AuthCommitteeHotCert> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential committee_cold_credential = 1;
   */
  committeeColdCredential?: StakeCredential;

  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential committee_hot_credential = 2;
   */
  committeeHotCredential?: StakeCredential;

  constructor(data?: PartialMessage<AuthCommitteeHotCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.AuthCommitteeHotCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "committee_cold_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "committee_hot_credential", kind: "message", T: StakeCredential },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthCommitteeHotCert {
    return new AuthCommitteeHotCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthCommitteeHotCert {
    return new AuthCommitteeHotCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthCommitteeHotCert {
    return new AuthCommitteeHotCert().fromJsonString(jsonString, options);
  }

  static equals(a: AuthCommitteeHotCert | PlainMessage<AuthCommitteeHotCert> | undefined, b: AuthCommitteeHotCert | PlainMessage<AuthCommitteeHotCert> | undefined): boolean {
    return proto3.util.equals(AuthCommitteeHotCert, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.Anchor
 */
export class Anchor extends Message<Anchor> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: bytes content_hash = 2;
   */
  contentHash = new Uint8Array(0);

  constructor(data?: PartialMessage<Anchor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.Anchor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Anchor {
    return new Anchor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Anchor {
    return new Anchor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Anchor {
    return new Anchor().fromJsonString(jsonString, options);
  }

  static equals(a: Anchor | PlainMessage<Anchor> | undefined, b: Anchor | PlainMessage<Anchor> | undefined): boolean {
    return proto3.util.equals(Anchor, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.ResignCommitteeColdCert
 */
export class ResignCommitteeColdCert extends Message<ResignCommitteeColdCert> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential committee_cold_credential = 1;
   */
  committeeColdCredential?: StakeCredential;

  /**
   * @generated from field: utxorpc.v1alpha.cardano.Anchor anchor = 2;
   */
  anchor?: Anchor;

  constructor(data?: PartialMessage<ResignCommitteeColdCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.ResignCommitteeColdCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "committee_cold_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "anchor", kind: "message", T: Anchor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResignCommitteeColdCert {
    return new ResignCommitteeColdCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResignCommitteeColdCert {
    return new ResignCommitteeColdCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResignCommitteeColdCert {
    return new ResignCommitteeColdCert().fromJsonString(jsonString, options);
  }

  static equals(a: ResignCommitteeColdCert | PlainMessage<ResignCommitteeColdCert> | undefined, b: ResignCommitteeColdCert | PlainMessage<ResignCommitteeColdCert> | undefined): boolean {
    return proto3.util.equals(ResignCommitteeColdCert, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.RegDRepCert
 */
export class RegDRepCert extends Message<RegDRepCert> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential drep_credential = 1;
   */
  drepCredential?: StakeCredential;

  /**
   * @generated from field: uint64 coin = 2;
   */
  coin = protoInt64.zero;

  /**
   * @generated from field: utxorpc.v1alpha.cardano.Anchor anchor = 3;
   */
  anchor?: Anchor;

  constructor(data?: PartialMessage<RegDRepCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.RegDRepCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "drep_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "anchor", kind: "message", T: Anchor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegDRepCert {
    return new RegDRepCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegDRepCert {
    return new RegDRepCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegDRepCert {
    return new RegDRepCert().fromJsonString(jsonString, options);
  }

  static equals(a: RegDRepCert | PlainMessage<RegDRepCert> | undefined, b: RegDRepCert | PlainMessage<RegDRepCert> | undefined): boolean {
    return proto3.util.equals(RegDRepCert, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.UnRegDRepCert
 */
export class UnRegDRepCert extends Message<UnRegDRepCert> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential drep_credential = 1;
   */
  drepCredential?: StakeCredential;

  /**
   * @generated from field: uint64 coin = 2;
   */
  coin = protoInt64.zero;

  constructor(data?: PartialMessage<UnRegDRepCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.UnRegDRepCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "drep_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnRegDRepCert {
    return new UnRegDRepCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnRegDRepCert {
    return new UnRegDRepCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnRegDRepCert {
    return new UnRegDRepCert().fromJsonString(jsonString, options);
  }

  static equals(a: UnRegDRepCert | PlainMessage<UnRegDRepCert> | undefined, b: UnRegDRepCert | PlainMessage<UnRegDRepCert> | undefined): boolean {
    return proto3.util.equals(UnRegDRepCert, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.UpdateDRepCert
 */
export class UpdateDRepCert extends Message<UpdateDRepCert> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.StakeCredential drep_credential = 1;
   */
  drepCredential?: StakeCredential;

  /**
   * @generated from field: utxorpc.v1alpha.cardano.Anchor anchor = 2;
   */
  anchor?: Anchor;

  constructor(data?: PartialMessage<UpdateDRepCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.UpdateDRepCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "drep_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "anchor", kind: "message", T: Anchor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDRepCert {
    return new UpdateDRepCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDRepCert {
    return new UpdateDRepCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDRepCert {
    return new UpdateDRepCert().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDRepCert | PlainMessage<UpdateDRepCert> | undefined, b: UpdateDRepCert | PlainMessage<UpdateDRepCert> | undefined): boolean {
    return proto3.util.equals(UpdateDRepCert, a, b);
  }
}

/**
 * Pattern of an address that can be used to evaluate matching predicates.
 *
 * @generated from message utxorpc.v1alpha.cardano.AddressPattern
 */
export class AddressPattern extends Message<AddressPattern> {
  /**
   * The address should match this exact address value.
   *
   * @generated from field: bytes exact_address = 1;
   */
  exactAddress = new Uint8Array(0);

  /**
   * The payment part of the address should match this value.
   *
   * @generated from field: bytes payment_part = 2;
   */
  paymentPart = new Uint8Array(0);

  /**
   * The delegation part of the address should match this value.
   *
   * @generated from field: bytes delegation_part = 3;
   */
  delegationPart = new Uint8Array(0);

  constructor(data?: PartialMessage<AddressPattern>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.AddressPattern";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exact_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "payment_part", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "delegation_part", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressPattern {
    return new AddressPattern().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressPattern {
    return new AddressPattern().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressPattern {
    return new AddressPattern().fromJsonString(jsonString, options);
  }

  static equals(a: AddressPattern | PlainMessage<AddressPattern> | undefined, b: AddressPattern | PlainMessage<AddressPattern> | undefined): boolean {
    return proto3.util.equals(AddressPattern, a, b);
  }
}

/**
 * Pattern of a native asset that can be used to evaluate matching predicates.
 *
 * @generated from message utxorpc.v1alpha.cardano.AssetPattern
 */
export class AssetPattern extends Message<AssetPattern> {
  /**
   * The asset should belong to this policy id
   *
   * @generated from field: bytes policy_id = 1;
   */
  policyId = new Uint8Array(0);

  /**
   * The asset should present this name
   *
   * @generated from field: bytes asset_name = 2;
   */
  assetName = new Uint8Array(0);

  constructor(data?: PartialMessage<AssetPattern>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.AssetPattern";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "policy_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "asset_name", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetPattern {
    return new AssetPattern().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetPattern {
    return new AssetPattern().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetPattern {
    return new AssetPattern().fromJsonString(jsonString, options);
  }

  static equals(a: AssetPattern | PlainMessage<AssetPattern> | undefined, b: AssetPattern | PlainMessage<AssetPattern> | undefined): boolean {
    return proto3.util.equals(AssetPattern, a, b);
  }
}

/**
 * Pattern of a tx output that can be used to evaluate matching predicates.
 *
 * @generated from message utxorpc.v1alpha.cardano.TxOutputPattern
 */
export class TxOutputPattern extends Message<TxOutputPattern> {
  /**
   * Match any address in the output that exhibits this pattern.
   *
   * @generated from field: utxorpc.v1alpha.cardano.AddressPattern address = 1;
   */
  address?: AddressPattern;

  /**
   * Match any asset in the output that exhibits this pattern.
   *
   * @generated from field: utxorpc.v1alpha.cardano.AssetPattern asset = 2;
   */
  asset?: AssetPattern;

  constructor(data?: PartialMessage<TxOutputPattern>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.TxOutputPattern";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "message", T: AddressPattern },
    { no: 2, name: "asset", kind: "message", T: AssetPattern },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxOutputPattern {
    return new TxOutputPattern().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxOutputPattern {
    return new TxOutputPattern().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxOutputPattern {
    return new TxOutputPattern().fromJsonString(jsonString, options);
  }

  static equals(a: TxOutputPattern | PlainMessage<TxOutputPattern> | undefined, b: TxOutputPattern | PlainMessage<TxOutputPattern> | undefined): boolean {
    return proto3.util.equals(TxOutputPattern, a, b);
  }
}

/**
 * Pattern of a Tx that can be used to evaluate matching predicates.
 *
 * @generated from message utxorpc.v1alpha.cardano.TxPattern
 */
export class TxPattern extends Message<TxPattern> {
  /**
   * Match any input that exhibits this pattern.
   *
   * @generated from field: utxorpc.v1alpha.cardano.TxOutputPattern consumes = 1;
   */
  consumes?: TxOutputPattern;

  /**
   * Match any output that exhibits this pattern.
   *
   * @generated from field: utxorpc.v1alpha.cardano.TxOutputPattern produces = 2;
   */
  produces?: TxOutputPattern;

  /**
   * Match any address (inputs, outputs, collateral, etc) that exhibits this pattern.
   *
   * @generated from field: utxorpc.v1alpha.cardano.AddressPattern has_address = 3;
   */
  hasAddress?: AddressPattern;

  /**
   * Match any asset that exhibits this pattern.
   *
   * @generated from field: utxorpc.v1alpha.cardano.AssetPattern moves_asset = 4;
   */
  movesAsset?: AssetPattern;

  /**
   * Match any tx that either mint or burn the the asset pattern.
   *
   * @generated from field: utxorpc.v1alpha.cardano.AssetPattern mints_asset = 5;
   */
  mintsAsset?: AssetPattern;

  constructor(data?: PartialMessage<TxPattern>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.TxPattern";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "consumes", kind: "message", T: TxOutputPattern },
    { no: 2, name: "produces", kind: "message", T: TxOutputPattern },
    { no: 3, name: "has_address", kind: "message", T: AddressPattern },
    { no: 4, name: "moves_asset", kind: "message", T: AssetPattern },
    { no: 5, name: "mints_asset", kind: "message", T: AssetPattern },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxPattern {
    return new TxPattern().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxPattern {
    return new TxPattern().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxPattern {
    return new TxPattern().fromJsonString(jsonString, options);
  }

  static equals(a: TxPattern | PlainMessage<TxPattern> | undefined, b: TxPattern | PlainMessage<TxPattern> | undefined): boolean {
    return proto3.util.equals(TxPattern, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.ExUnits
 */
export class ExUnits extends Message<ExUnits> {
  /**
   * @generated from field: uint64 steps = 1;
   */
  steps = protoInt64.zero;

  /**
   * @generated from field: uint64 memory = 2;
   */
  memory = protoInt64.zero;

  constructor(data?: PartialMessage<ExUnits>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.ExUnits";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "steps", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "memory", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExUnits {
    return new ExUnits().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExUnits {
    return new ExUnits().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExUnits {
    return new ExUnits().fromJsonString(jsonString, options);
  }

  static equals(a: ExUnits | PlainMessage<ExUnits> | undefined, b: ExUnits | PlainMessage<ExUnits> | undefined): boolean {
    return proto3.util.equals(ExUnits, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.ExPrices
 */
export class ExPrices extends Message<ExPrices> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.RationalNumber steps = 1;
   */
  steps?: RationalNumber;

  /**
   * @generated from field: utxorpc.v1alpha.cardano.RationalNumber memory = 2;
   */
  memory?: RationalNumber;

  constructor(data?: PartialMessage<ExPrices>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.ExPrices";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "steps", kind: "message", T: RationalNumber },
    { no: 2, name: "memory", kind: "message", T: RationalNumber },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExPrices {
    return new ExPrices().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExPrices {
    return new ExPrices().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExPrices {
    return new ExPrices().fromJsonString(jsonString, options);
  }

  static equals(a: ExPrices | PlainMessage<ExPrices> | undefined, b: ExPrices | PlainMessage<ExPrices> | undefined): boolean {
    return proto3.util.equals(ExPrices, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.ProtocolVersion
 */
export class ProtocolVersion extends Message<ProtocolVersion> {
  /**
   * @generated from field: uint32 major = 1;
   */
  major = 0;

  /**
   * @generated from field: uint32 minor = 2;
   */
  minor = 0;

  constructor(data?: PartialMessage<ProtocolVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.ProtocolVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "major", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "minor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProtocolVersion {
    return new ProtocolVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProtocolVersion {
    return new ProtocolVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProtocolVersion {
    return new ProtocolVersion().fromJsonString(jsonString, options);
  }

  static equals(a: ProtocolVersion | PlainMessage<ProtocolVersion> | undefined, b: ProtocolVersion | PlainMessage<ProtocolVersion> | undefined): boolean {
    return proto3.util.equals(ProtocolVersion, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.CostModel
 */
export class CostModel extends Message<CostModel> {
  /**
   * @generated from field: repeated int64 values = 1;
   */
  values: bigint[] = [];

  constructor(data?: PartialMessage<CostModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.CostModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CostModel {
    return new CostModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CostModel {
    return new CostModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CostModel {
    return new CostModel().fromJsonString(jsonString, options);
  }

  static equals(a: CostModel | PlainMessage<CostModel> | undefined, b: CostModel | PlainMessage<CostModel> | undefined): boolean {
    return proto3.util.equals(CostModel, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.CostModels
 */
export class CostModels extends Message<CostModels> {
  /**
   * @generated from field: utxorpc.v1alpha.cardano.CostModel plutus_v1 = 1;
   */
  plutusV1?: CostModel;

  /**
   * @generated from field: utxorpc.v1alpha.cardano.CostModel plutus_v2 = 2;
   */
  plutusV2?: CostModel;

  /**
   * @generated from field: utxorpc.v1alpha.cardano.CostModel plutus_v3 = 3;
   */
  plutusV3?: CostModel;

  constructor(data?: PartialMessage<CostModels>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.CostModels";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plutus_v1", kind: "message", T: CostModel },
    { no: 2, name: "plutus_v2", kind: "message", T: CostModel },
    { no: 3, name: "plutus_v3", kind: "message", T: CostModel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CostModels {
    return new CostModels().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CostModels {
    return new CostModels().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CostModels {
    return new CostModels().fromJsonString(jsonString, options);
  }

  static equals(a: CostModels | PlainMessage<CostModels> | undefined, b: CostModels | PlainMessage<CostModels> | undefined): boolean {
    return proto3.util.equals(CostModels, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.VotingThresholds
 */
export class VotingThresholds extends Message<VotingThresholds> {
  /**
   * @generated from field: repeated utxorpc.v1alpha.cardano.RationalNumber thresholds = 1;
   */
  thresholds: RationalNumber[] = [];

  constructor(data?: PartialMessage<VotingThresholds>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.VotingThresholds";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "thresholds", kind: "message", T: RationalNumber, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VotingThresholds {
    return new VotingThresholds().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VotingThresholds {
    return new VotingThresholds().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VotingThresholds {
    return new VotingThresholds().fromJsonString(jsonString, options);
  }

  static equals(a: VotingThresholds | PlainMessage<VotingThresholds> | undefined, b: VotingThresholds | PlainMessage<VotingThresholds> | undefined): boolean {
    return proto3.util.equals(VotingThresholds, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.PParams
 */
export class PParams extends Message<PParams> {
  /**
   * The number of coins per UTXO byte.
   *
   * @generated from field: uint64 coins_per_utxo_byte = 1;
   */
  coinsPerUtxoByte = protoInt64.zero;

  /**
   * The maximum transaction size.
   *
   * @generated from field: uint64 max_tx_size = 2;
   */
  maxTxSize = protoInt64.zero;

  /**
   * The minimum fee coefficient.
   *
   * @generated from field: uint64 min_fee_coefficient = 3;
   */
  minFeeCoefficient = protoInt64.zero;

  /**
   * The minimum fee constant.
   *
   * @generated from field: uint64 min_fee_constant = 4;
   */
  minFeeConstant = protoInt64.zero;

  /**
   * The maximum block body size.
   *
   * @generated from field: uint64 max_block_body_size = 5;
   */
  maxBlockBodySize = protoInt64.zero;

  /**
   * The maximum block header size.
   *
   * @generated from field: uint64 max_block_header_size = 6;
   */
  maxBlockHeaderSize = protoInt64.zero;

  /**
   * The stake key deposit.
   *
   * @generated from field: uint64 stake_key_deposit = 7;
   */
  stakeKeyDeposit = protoInt64.zero;

  /**
   * The pool deposit.
   *
   * @generated from field: uint64 pool_deposit = 8;
   */
  poolDeposit = protoInt64.zero;

  /**
   * The pool retirement epoch bound.
   *
   * @generated from field: uint64 pool_retirement_epoch_bound = 9;
   */
  poolRetirementEpochBound = protoInt64.zero;

  /**
   * The desired number of pools.
   *
   * @generated from field: uint64 desired_number_of_pools = 10;
   */
  desiredNumberOfPools = protoInt64.zero;

  /**
   * The pool influence.
   *
   * @generated from field: utxorpc.v1alpha.cardano.RationalNumber pool_influence = 11;
   */
  poolInfluence?: RationalNumber;

  /**
   * The monetary expansion.
   *
   * @generated from field: utxorpc.v1alpha.cardano.RationalNumber monetary_expansion = 12;
   */
  monetaryExpansion?: RationalNumber;

  /**
   * The treasury expansion.
   *
   * @generated from field: utxorpc.v1alpha.cardano.RationalNumber treasury_expansion = 13;
   */
  treasuryExpansion?: RationalNumber;

  /**
   * The minimum pool cost.
   *
   * @generated from field: uint64 min_pool_cost = 14;
   */
  minPoolCost = protoInt64.zero;

  /**
   * The protocol version.
   *
   * @generated from field: utxorpc.v1alpha.cardano.ProtocolVersion protocol_version = 15;
   */
  protocolVersion?: ProtocolVersion;

  /**
   * The maximum value size.
   *
   * @generated from field: uint64 max_value_size = 16;
   */
  maxValueSize = protoInt64.zero;

  /**
   * The collateral percentage.
   *
   * @generated from field: uint64 collateral_percentage = 17;
   */
  collateralPercentage = protoInt64.zero;

  /**
   * The maximum collateral inputs.
   *
   * @generated from field: uint64 max_collateral_inputs = 18;
   */
  maxCollateralInputs = protoInt64.zero;

  /**
   * The cost models.
   *
   * @generated from field: utxorpc.v1alpha.cardano.CostModels cost_models = 19;
   */
  costModels?: CostModels;

  /**
   * The prices.
   *
   * @generated from field: utxorpc.v1alpha.cardano.ExPrices prices = 20;
   */
  prices?: ExPrices;

  /**
   * The maximum execution units per transaction.
   *
   * @generated from field: utxorpc.v1alpha.cardano.ExUnits max_execution_units_per_transaction = 21;
   */
  maxExecutionUnitsPerTransaction?: ExUnits;

  /**
   * The maximum execution units per block.
   *
   * @generated from field: utxorpc.v1alpha.cardano.ExUnits max_execution_units_per_block = 22;
   */
  maxExecutionUnitsPerBlock?: ExUnits;

  /**
   * The minimum fee per script reference byte.
   *
   * @generated from field: utxorpc.v1alpha.cardano.RationalNumber min_fee_script_ref_cost_per_byte = 23;
   */
  minFeeScriptRefCostPerByte?: RationalNumber;

  /**
   * The pool voting thresholds.
   *
   * @generated from field: utxorpc.v1alpha.cardano.VotingThresholds pool_voting_thresholds = 24;
   */
  poolVotingThresholds?: VotingThresholds;

  /**
   * The drep voting thresholds.
   *
   * @generated from field: utxorpc.v1alpha.cardano.VotingThresholds drep_voting_thresholds = 25;
   */
  drepVotingThresholds?: VotingThresholds;

  /**
   * The minimum committee size.
   *
   * @generated from field: uint32 min_committee_size = 26;
   */
  minCommitteeSize = 0;

  /**
   * The committee term limit.
   *
   * @generated from field: uint64 committee_term_limit = 27;
   */
  committeeTermLimit = protoInt64.zero;

  /**
   * The governance action validity period.
   *
   * @generated from field: uint64 governance_action_validity_period = 28;
   */
  governanceActionValidityPeriod = protoInt64.zero;

  /**
   * The governance action deposit.
   *
   * @generated from field: uint64 governance_action_deposit = 29;
   */
  governanceActionDeposit = protoInt64.zero;

  /**
   * The drep deposit.
   *
   * @generated from field: uint64 drep_deposit = 30;
   */
  drepDeposit = protoInt64.zero;

  /**
   * The drep inactivity period.
   *
   * @generated from field: uint64 drep_inactivity_period = 31;
   */
  drepInactivityPeriod = protoInt64.zero;

  constructor(data?: PartialMessage<PParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.PParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coins_per_utxo_byte", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "max_tx_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "min_fee_coefficient", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "min_fee_constant", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "max_block_body_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "max_block_header_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "stake_key_deposit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "pool_deposit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "pool_retirement_epoch_bound", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "desired_number_of_pools", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "pool_influence", kind: "message", T: RationalNumber },
    { no: 12, name: "monetary_expansion", kind: "message", T: RationalNumber },
    { no: 13, name: "treasury_expansion", kind: "message", T: RationalNumber },
    { no: 14, name: "min_pool_cost", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "protocol_version", kind: "message", T: ProtocolVersion },
    { no: 16, name: "max_value_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "collateral_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "max_collateral_inputs", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "cost_models", kind: "message", T: CostModels },
    { no: 20, name: "prices", kind: "message", T: ExPrices },
    { no: 21, name: "max_execution_units_per_transaction", kind: "message", T: ExUnits },
    { no: 22, name: "max_execution_units_per_block", kind: "message", T: ExUnits },
    { no: 23, name: "min_fee_script_ref_cost_per_byte", kind: "message", T: RationalNumber },
    { no: 24, name: "pool_voting_thresholds", kind: "message", T: VotingThresholds },
    { no: 25, name: "drep_voting_thresholds", kind: "message", T: VotingThresholds },
    { no: 26, name: "min_committee_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 27, name: "committee_term_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 28, name: "governance_action_validity_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 29, name: "governance_action_deposit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "drep_deposit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 31, name: "drep_inactivity_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PParams {
    return new PParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PParams {
    return new PParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PParams {
    return new PParams().fromJsonString(jsonString, options);
  }

  static equals(a: PParams | PlainMessage<PParams> | undefined, b: PParams | PlainMessage<PParams> | undefined): boolean {
    return proto3.util.equals(PParams, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.EvalError
 */
export class EvalError extends Message<EvalError> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  constructor(data?: PartialMessage<EvalError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.EvalError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvalError {
    return new EvalError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvalError {
    return new EvalError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvalError {
    return new EvalError().fromJsonString(jsonString, options);
  }

  static equals(a: EvalError | PlainMessage<EvalError> | undefined, b: EvalError | PlainMessage<EvalError> | undefined): boolean {
    return proto3.util.equals(EvalError, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.EvalTrace
 */
export class EvalTrace extends Message<EvalTrace> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  constructor(data?: PartialMessage<EvalTrace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.EvalTrace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvalTrace {
    return new EvalTrace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvalTrace {
    return new EvalTrace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvalTrace {
    return new EvalTrace().fromJsonString(jsonString, options);
  }

  static equals(a: EvalTrace | PlainMessage<EvalTrace> | undefined, b: EvalTrace | PlainMessage<EvalTrace> | undefined): boolean {
    return proto3.util.equals(EvalTrace, a, b);
  }
}

/**
 * @generated from message utxorpc.v1alpha.cardano.TxEval
 */
export class TxEval extends Message<TxEval> {
  /**
   * @generated from field: uint64 fee = 1;
   */
  fee = protoInt64.zero;

  /**
   * @generated from field: utxorpc.v1alpha.cardano.ExUnits ex_units = 2;
   */
  exUnits?: ExUnits;

  /**
   * @generated from field: repeated utxorpc.v1alpha.cardano.EvalError errors = 3;
   */
  errors: EvalError[] = [];

  /**
   * @generated from field: repeated utxorpc.v1alpha.cardano.EvalTrace traces = 4;
   */
  traces: EvalTrace[] = [];

  /**
   * @generated from field: repeated utxorpc.v1alpha.cardano.Redeemer redeemers = 5;
   */
  redeemers: Redeemer[] = [];

  constructor(data?: PartialMessage<TxEval>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.v1alpha.cardano.TxEval";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fee", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "ex_units", kind: "message", T: ExUnits },
    { no: 3, name: "errors", kind: "message", T: EvalError, repeated: true },
    { no: 4, name: "traces", kind: "message", T: EvalTrace, repeated: true },
    { no: 5, name: "redeemers", kind: "message", T: Redeemer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxEval {
    return new TxEval().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxEval {
    return new TxEval().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxEval {
    return new TxEval().fromJsonString(jsonString, options);
  }

  static equals(a: TxEval | PlainMessage<TxEval> | undefined, b: TxEval | PlainMessage<TxEval> | undefined): boolean {
    return proto3.util.equals(TxEval, a, b);
  }
}

